<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hadoop编辑系统文件</title>
    <link href="/2024/04/20/Hadoop%E7%BC%96%E8%BE%91%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/"/>
    <url>/2024/04/20/Hadoop%E7%BC%96%E8%BE%91%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>在搭建Hadoop伪分布式环境时，有一个不查不知道的操作</p><p>是基于Linux操作系统上的</p><blockquote><p>当我们进行vi etc&#x2F;profile时会弹出一个环境变量的东东</p></blockquote><p>我们的目的是修改它，那么该如何操作呢？ ↓↓↓</p><ol><li>首先我们要知道几个内容</li></ol><ul><li><p>vi：是Linux系统内置的文本编辑器，通过这个指令可以编辑文件</p></li><li><p>etc&#x2F;profile：永久性的环境变量，是全局变量，&#x2F;etc&#x2F;profile.d&#x2F; 设置对所有用户生效（实际上还是比较类似于我们Java配环境变量的）</p></li></ul><p>那也就是说我们只是弹出来一个文件，跟正常Windows的操作一样，一样有编辑修改和保存关闭等等的功能</p><ol><li>vi这些操作必须通过指令完成，而不是鼠标简简单单就可以操作</li></ol><ul><li><p>i(insert)：直接在文件界面按i键就可以进行修改操作，页面下也可以看到“插入”二字</p></li><li><p>按下Esc(就是键盘左上角的键位)：这个就是类似于输入命令的前置操作，如果不按是无法输入命令的(输入模式是不可以直接切换到编辑模式的，<strong>需要先按下 Esc键回到命令模式</strong>，此时左下角的 – INSERT – 会消失)</p></li><li><p>:wq：表示保存并退出文件</p></li></ul><p>这样一系列操作后才能回到我们最初的页面，并且执行其他命令啦</p>]]></content>
    
    
    <categories>
      
      <category>错误日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双链表</title>
    <link href="/2024/04/20/%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/04/20/%E5%8F%8C%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>在单链表基础上增加向前的指针，使我们能够知道该结点的前后结点的信息</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>时间复杂度O(1)</p><p>直接把当前结点的prev指向前驱，next指向后继；再将前驱的next和后继的prev指向当前结点，插入操作结束！</p><p><a href="https://imgse.com/i/pkSXhdO"><img src="https://s21.ax1x.com/2024/04/20/pkSXhdO.md.jpg" alt="pkSXhdO.md.jpg"></a></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>时间复杂度O(1)</p><p>将指向当前结点的next指针指向当前结点的后继；</p><p><code>cur.next.prev = cur.prev;</code></p><p>将指向当前结点的prev指针指向当前结点的前驱；</p><p><code>cur.prev.next = cur.next;</code></p><p><a href="https://imgse.com/i/pkSX4oD"><img src="https://s21.ax1x.com/2024/04/20/pkSX4oD.md.jpg" alt="pkSX4oD.md.jpg"></a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表</title>
    <link href="/2024/04/20/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/04/20/%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><blockquote><p>每个节点 &#x3D; 存储值 + 链接下一结点的引用字段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    SinglyListNode next;<br>    SinglyListNode(<span class="hljs-type">int</span> x) &#123; <br>      val = x; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>若从链表头一直到尾都进行一次遍历，则需要O(N)时间，效率太低，那么该如何提升速度呢？多加一个变量－－头结点是一个很好的办法(头结点一般不设置值)。</p></blockquote><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>时间复杂度O(1)</p><p><a href="https://imgse.com/i/pkSXusP"><img src="https://s21.ax1x.com/2024/04/20/pkSXusP.png" alt="pkSXusP.png"></a></p><p>要想插入一个新结点，我们只需要让新结点(cur)的指针先指向想插入地方的后者(next)，再让前者(prev)的指针指向新的结点(cur)，这样一个新的链接就形成了，是不是非常简单！</p><p>注意：一定要让新结点先与后方的结点连接上，试想看，如果先让prev直接指向cur会发生什么事情呢？直接进行连接的时候我们会发现，next直接会断掉，如果我们再想让cur连接上next是不是就于事无补了，这下好啦，根本就找不到next在哪里了(扶额苦笑)，如图</p><p><a href="https://imgse.com/i/pkSXldS"><img src="https://s21.ax1x.com/2024/04/20/pkSXldS.jpg" alt="pkSXldS.jpg"></a></p><p>那假如我们有的时候就会忘记先连接后边怎么办呢，没关系！！！这有什么难的</p><p>我们直接先对这串链表进行一个存储的大动作，用另一个变量存起来，这样我想用就可以用咯，相当于拿了一个备份（虽然说浪费了一定的空间，但是不会再弄丢啦）</p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>时间复杂度O(N)</p><p>懂了插入操作之后，删除操作就更好理解了，操作链表的本质就是改变指针(引用)</p><p>我们假设想删除某一结点x，意思就是想要在链表中将x刨除，那么我们直接让指针越过该结点不就好了，让x的前指针(a)直接指向他的下一个结点(b)即可，删除操作就是这么简单！</p><p><a href="https://imgse.com/i/pkSX1Ig"><img src="https://s21.ax1x.com/2024/04/20/pkSX1Ig.md.jpg" alt="pkSX1Ig.md.jpg"></a></p><h2 id="特殊位置的增删改查"><a href="#特殊位置的增删改查" class="headerlink" title="特殊位置的增删改查"></a>特殊位置的增删改查</h2><h3 id="在开头增加结点"><a href="#在开头增加结点" class="headerlink" title="在开头增加结点"></a>在开头增加结点</h3><p>我们知道，头结点是链表在增删改查提高效率的一大关键，那么如果我们想要在某个链表的开头更新节点，应该怎么办呢</p><p>直接三步走</p><ol><li><p>初始化一个新结点 cur ；</p></li><li><p>将新结点的后继指向头结点的后继；</p></li><li><p>将头结点后继指向新结点 。</p></li></ol><p><a href="https://imgse.com/i/pkSXJRs"><img src="https://s21.ax1x.com/2024/04/20/pkSXJRs.png" alt="pkSXJRs.png"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">headInsert</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>&#123;<br>  <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data);<br>  n.next = head.next;<br>  head.next = n;<br>  <span class="hljs-comment">//head.next = new Node(data,head.next);</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除第一个结点"><a href="#删除第一个结点" class="headerlink" title="删除第一个结点"></a>删除第一个结点</h3><p>在已有链表上删除第一个结点</p><p>这还不简单，直接让头结点指向第二个节点即可</p><p><a href="https://imgse.com/i/pkSXYzn"><img src="https://s21.ax1x.com/2024/04/20/pkSXYzn.md.jpg" alt="pkSXYzn.md.jpg"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> head.next;<br>  head.next = first.next;<br>  <span class="hljs-comment">//head.next = head.next.next;</span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="在末尾插入结点"><a href="#在末尾插入结点" class="headerlink" title="在末尾插入结点"></a>在末尾插入结点</h3><p>这似乎比在开始的操作要复杂一些，但如果我们定义一个临时指针，让他做一个索引标记，指向实时位置，我们就知道现在遍历到何处了，这样就方便在尾巴进行插入操作啦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tailInsert</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>&#123;<br>  <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>  <span class="hljs-comment">//遍历到结尾处</span><br>  <span class="hljs-keyword">while</span>(temp.next!=<span class="hljs-literal">null</span>)&#123;<br>    temp = temp.next;<br>    &#125;<br>  <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data);<br>  cur = temp.next;<br>  <span class="hljs-comment">//temp.next = new Node(data,null)</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除末尾结点"><a href="#删除末尾结点" class="headerlink" title="删除末尾结点"></a>删除末尾结点</h3><p>同理基础操作是遍历,但遍历只能让temp定位到最后一个结点，如果需要删除最后一个节点只能找到倒数第二个节点，让他的后继为空才行，于是需要多加一个变量找到temp的前一个结点（链表长度为空直接返回）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(head.next==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span>(temp.next!=<span class="hljs-literal">null</span>)&#123;<br>        prev = temp;<br>        temp = temp.next;<br>    &#125;<br>    prev.next = <span class="hljs-literal">null</span>; <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>头插头删 → 栈 </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多人上传导致Git冲突问题解决</title>
    <link href="/2023/12/28/%E5%A4%9A%E4%BA%BA%E4%B8%8A%E4%BC%A0%E5%AF%BC%E8%87%B4Git%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/12/28/%E5%A4%9A%E4%BA%BA%E4%B8%8A%E4%BC%A0%E5%AF%BC%E8%87%B4Git%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>引子：在云效上我发现我的前端文件推不上去了，经过学习后发现是这个原因：<br>因为我们一开始没有建立每个人属于自己的分支，并且也要分好前后端两个分支</p></blockquote><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一开始后端文件直接推送在了远程仓库的master主线上，后来我也在idea直接把前端文件推送到这个master主线，然后idea显示推送失败，我查到推送失败是由于某种冲突导致的，再次拉取文件推送文件依然无用，最后也没有用git命令解决好。</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li><p>首先我们需要知道分支是什么东西。分支就像树分出来的枝干一样，每一根都是独立的，所以我们如果建立了自己独立的分支是不会互相干扰的，当然，每次你做的修改，提交的版本别人也不能看到，但是这样可以做到代码的互不影响，不会因为每个人推送的内容和目录结构等的不同造成冲突导致 推送失败。</p></li><li><p>但是仅仅用分支当然无法完成合作，我们最终是要一起看到代码的，所以git有一个功能——合并，对于我们的需求刚刚好。合并是什么呢？是指将一个分支的更改合并到另一个分支上的操作。合并可以将一个分支上的提交应用到另一个分支上，使两个分支的代码保持同步，这就是我们想要的效果。但是合并不是随随便便就能够完成的，他有以下条件：</p><ol start="3"><li><p>提交代码：在进行合并之前，确保您已将您的更改提交到相应的分支(也就是你自己的分支先提交一次版本)。这样可以保证合并操作是基于最新的代码。</p></li><li><p>冲突解决：如果两个分支上的代码在同一个地方进行了修改，或者在合并时两个分支的项目结构不同，可能会发生冲突。</p><ul><li><p>有的修改不发生冲突(目录结构相同且修改的为不同文件的不同位置)，Git会自动帮你合并相应的代码</p></li><li><p>有的修改会发生冲突(与上一条相悖)，需要手动解决，通过编辑代码文件来处理冲突部分。</p></li></ul></li><li><p>推送代码：合并后，此时远程分支和本地分支上的内容就完全相同了，将合并后的代码推送到      远程分支上,提交成了最新的代码</p></li></ol><blockquote><p>所以每个成员应该拥有自己的分支，并且要设置一个前端远程分支和后端远程分支分别提供给前端人员和后端人员进行代码合作，而且要进行适当次数的拉取和更新操作，不要过于频繁或滞后。</p></blockquote></li><li><p>当我们用合并将前端远程分支和后端远程分支分别完善后，如果要把前端代码和后端代码放在同一台机器上时，我们先要拉取前端远程仓库中最新版本，然后，在本地仓库中创建一个新的分支来存放后端代码，使用<code>git pull</code>命令拉取后端分支的代码，这样，前端人员就可以在自己的分支上进行前端和后端代码的合并和测试。后端人员操作同理，不过要确保在拉取和合并代码之前，前(后)端先与后(前)端开发人员进行沟通，了解后(前)端代码的分支名称和最新状态。</p></li></ol><blockquote><p>当然，严谨的项目合作是需要每次完成一个模块内容就需要进行一个单元测试才能检测出项目是否出现问题。另外，项目出现冲突是非常正常的事情，最重要的是解决问题。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在多人合作时，避免冲突的关键是有效的沟通和协作。以下是一些方法可以帮助减少冲突的发生：</p><ol><li><p>使用分支：每个人可以在自己的分支上进行开发工作，这样可以避免直接在主分支上进行更改，减少冲突的可能性。在开发完成后，通过合并分支将更改合并到主分支上。</p></li><li><p>频繁地提交和拉取：每个人应该频繁地提交他们的更改，并定期从远程仓库拉取更新。这样可以避免更改集中在某个分支上，减少冲突的可能性。</p></li><li><p>沟通和协调：团队成员之间的沟通和协调是避免冲突的关键。如果两个人同时对同一部分代码进行更改，及时的沟通可以帮助解决冲突并协商合适的解决方案。</p></li><li><p>解决冲突：如果发生冲突，不要惊慌。冲突是正常的，使用版本控制系统提供的工具（如Git的冲突解决工具）来解决冲突。与团队成员一起合作解决冲突，并确保每个人都理解和接受最终的修改。</p></li><li><p>代码审查：进行代码审查是另一个有效的方法，可以帮助发现潜在的冲突和问题。通过团队中其他成员的审查，可以提前发现和解决冲突，提高代码质量和合作效率。</p></li><li><p>文档和规范：制定一些规范和最佳实践，例如代码风格、命名约定等，以减少冲突的发生。确保所有成员了解和遵守这些规范。<br>总之，通过良好的沟通、合理的分支管理、频繁的提交和拉取、合作解决冲突以及代码审查等方法，可以帮助团队避免冲突，并提高多人合作的效率和质量。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>错误日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python操作Kafka错误日志</title>
    <link href="/2023/11/23/Python%E6%93%8D%E4%BD%9CKafka/"/>
    <url>/2023/11/23/Python%E6%93%8D%E4%BD%9CKafka/</url>
    
    <content type="html"><![CDATA[<h2 id="问题一：无法打开zookeeper"><a href="#问题一：无法打开zookeeper" class="headerlink" title="问题一：无法打开zookeeper"></a>问题一：无法打开zookeeper</h2><blockquote><p>由于我kafka下载的版本是2.12-2.4.0,所以内置了zookeeper，不用单独下载</p></blockquote><ul><li><p>错误一：这个问题其实是由于我太久没有操作cmd导致的，我忘记了同盘下，切目录需要使用cd，导致系统找不到该路径</p></li><li><p>错误二：但仅仅这样还是会错误，仍然是系统找不到该路径</p><p>  所以我们还需要做以下操作：</p><p>  在你所对应的kafka目录下要自己手动创建两个名为”data”和”logs”的文件夹，方便后续安排路径</p><p>  <a href="https://imgloc.com/image/Mq6h2"><img src="https://i.imgs.ovh/2023/11/26/Mq6h2.md.png" alt="Mq6h2.md.png"></a></p><p>  接着，打开config&#x2F;zookeeper.properties(使用vscode或者记事本打开都可以)，我们来改一下配置，红框中是你所需要改的，默认是tmp什么的，改成刚刚手动创建的data文件位置即可；同时注意观察下面的客户端口号是否为2181(zookeeper默认就是这个，有些博主说只要改成对应的端口号就都可以使用，我没改)</p><p>  <img src="https://i.imgs.ovh/2023/11/26/MqWzj.png" alt="MqWzj.png"></p><p>  下一步，打开config&#x2F;server.properties，同样也是更改配置，同理，也要检查好你的地址和端口号</p><p>  <img src="https://i.imgs.ovh/2023/11/26/MqB6V.png" alt="MqB6V.png"></p><p>  <img src="https://i.imgs.ovh/2023/11/26/Mq0CI.png" alt="Mq0CI.png"></p></li><li><p>错误三：然后我们再来尝试打开，结果是kafka正常打开，zookeeper仍然找不到路径，这是为什么呢？于是我通过搜索找到了问题的原因：由于kafka是使用Java进行编写的，所以，应该是Java环境存在问题 <strong>↓</strong></p><p>  参考文章<a href="https://blog.csdn.net/GoodburghCottage/article/details/125896525">Windows10下安装Kafka超级详细的教程（包含安装过程中遇到的问题和解决办法）</a></p><p>  解决方法：打开 kafka\bin\windows\kafka-run-class.bat ⽂件。</p></li></ul><p>进⼊kafka⽬录 ，打开上⾯说到的这个⽂件，查找后的内容如下所⽰。</p><pre><code class="hljs">&lt;img src=&quot;https://i.imgs.ovh/2023/11/26/MqIcJ.png&quot; alt=&quot;MqIcJ.png&quot; border=&quot;0&quot;&gt;</code></pre><p>具体原因请看这个博主的说法<a href="https://blog.csdn.net/VinceZxy/article/details/100153085">.\bin\windows\kafka-server-start.bat .\config\server.properties 系统找不到指定路径，启动zookeeper时候闪退</a></p><p>雀食，我的原因也是这个，由于已经在Java环境中写了&#x2F;bin，查找路径的时候仍然写上了&#x2F;bin，结果路径就变成了&#x2F;bin&#x2F;bin，自然就找不到路径了</p><h2 id="问题二：操作Kafka写代码报错"><a href="#问题二：操作Kafka写代码报错" class="headerlink" title="问题二：操作Kafka写代码报错"></a>问题二：操作Kafka写代码报错</h2><p>zookeeper和kafka都已经启动就绪</p><p>错误一：一定要注意是否打开了MySQL服务，数据库是否连接好，参数配置是否设置正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;your_password&#x27;</span>, database=<span class="hljs-string">&#x27;数据采集与处理&#x27;</span>)<br></code></pre></td></tr></table></figure><p>错误二：字段类型为data无法被自动处理成json格式，需要函数strftime()转换成字符串格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;birthday&#x27;</span>: row[<span class="hljs-number">3</span>].strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br></code></pre></td></tr></table></figure><p>错误三：如果像以下这么写会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">producer = KafkaProducer(bootstrap_servers=<span class="hljs-string">&#x27;localhost:9092&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可以多加一个api(api版本就是你的kafka对应版本)  <strong>↓</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">producer = KafkaProducer(bootstrap_servers=<span class="hljs-string">&#x27;localhost:9092&#x27;</span>, api_version=(<span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h2 id="未解决问题"><a href="#未解决问题" class="headerlink" title="未解决问题"></a>未解决问题</h2><p>每次打印直接输出整个消息，无法每行分开打印（整个写循环改打印规则，不想改了）</p><p>kafka_2.12-2.4.0\bin\windows&gt;kafka-server-start.bat ….\config&#x2F;server.properties</p><p>kafka_2.12-2.4.0\bin\windows&gt;zookeeper-server-start.bat ….\config&#x2F;zookeeper.properties</p>]]></content>
    
    
    <categories>
      
      <category>错误日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/23/hello-world/"/>
    <url>/2023/11/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
