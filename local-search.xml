<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计网新识</title>
    <link href="/2025/06/04/%E8%AE%A1%E7%BD%91%E6%96%B0%E8%AF%86/"/>
    <url>/2025/06/04/%E8%AE%A1%E7%BD%91%E6%96%B0%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>什么是计算机网络：计算机网络是指将 地理位置 不同的具有独立功能的 <strong>多台计算机</strong> 及其 <strong>外部设备</strong>，通过 <strong>通信线路</strong> 和 <strong>通信设备</strong> 连接起来，在 网络操作系统， 网络管理软件 及 网络通信协议 的管理和协调下，实现 资源共享 和 信息传递 的 计算机系统。</p><p>计算机网络的组成：<strong>硬件 软件 协议</strong></p><p>速率：数据传输的速率</p><p>带宽：<strong>单位时间内</strong>的数据传输的最大速率</p><p>吞吐量：<strong>某时刻</strong>的速率（不超过最大速率）</p><p>时延：发送(传输)  传播  处理  排队</p><ul><li>发送时延：将整个数据块（或分组）的所有比特发送到信道上所需的时间</li><li>传播时延：最后一个比特到达接收端的时间</li><li>排队时延：在路由器等待转发的时间</li><li>处理时延：数据到达网络设备或主机时所作的数据处理，例如差错检验和选择接口转发</li></ul><p>时延带宽积：时延*带宽，代表已从发送端发出 但未到达 接收端的最大比特数</p><p>往返时延RTT(Round-Trip Time)：发送完到确认接收数据的时间</p><ul><li>发送端：传播</li><li>接收端：处理+确认发送时延+确认传播时延</li><li>不算发送端的发送时延</li></ul><h1 id="计网的整体流程把控"><a href="#计网的整体流程把控" class="headerlink" title="计网的整体流程把控"></a>计网的整体流程把控</h1><h2 id="客户端是怎么一步一步找到服务器的呢？"><a href="#客户端是怎么一步一步找到服务器的呢？" class="headerlink" title="客户端是怎么一步一步找到服务器的呢？"></a>客户端是怎么一步一步找到服务器的呢？</h2><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation1748783817278-ebe087ec-302a-46be-895e-ae226d5523b0.png"></p><p>实际在编程和应用当中，用的最多的就是<strong>TCP&#x2F;IP模型</strong></p><p>拿客户端对服务器端请求举例</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation1748416522009-3fb5cc41-256c-4aaa-b6ff-50c8c16cf1d6.jpeg"></p><p>客户端要想得到响应必须先随便发一个东西，那么就涉及到三次握手：</p><p>对应服务器闻声赶来，这就是第一次握手</p><p>接下来服务器回馈，这就是第二次握手</p><p>客户端应答，收到了，这就是第三次握手</p><p>建立连接之后第四次就可以正常传输数据了</p><p>包括建立连接，<strong>每次的通信都需要经过这整个模型</strong></p><h1 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h1><p>前三层是通信子网  使用物理链路组成</p><p>后三层是资源子网  软件控制</p><h2 id="会话层（了解即可）"><a href="#会话层（了解即可）" class="headerlink" title="会话层（了解即可）"></a>会话层（了解即可）</h2><p>它主要负责在网络通信的应用程序之间建立、管理和协调“会话”。</p><p>可以将会话理解为<strong>一次持续一段时间、有特定目标</strong>的对话。会话层的作用就是确保这样的“对话”能够有序、可靠、有效地进行。</p><ol><li>会话的建立、管理和终止：</li></ol><ul><li>当两个应用程序（例如，你的浏览器和网页服务器）需要通信时，会话层负责在它们之间建立连接（建立会话）。</li><li>在通信过程中，它管理这个会话的状态和参数。</li><li>当通信结束时，它负责以有序的方式终止会话。</li></ul><ol><li>对话控制：</li></ol><ul><li>协调谁在什么时候说话。 它管理通信的模式：</li></ul><p>单工 半双工 全双工</p><ol><li>同步点管理：</li></ol><ul><li>在传输大量数据（如一个大文件）时，会话层可以设置检查点或同步点。</li><li>如果在传输过程中发生故障（如网络中断），双方可以从最近的、双方都同意的同步点恢复传输，而不是从零开始。这大大提高了大文件传输或长时间操作（如数据库事务）的效率和可靠性。<strong>比较类似于游戏里的存档点</strong></li></ul><ol><li>异常报告：如果会话层本身或在它之上的层（应用层、表示层）发生问题，会话层负责将相关的异常信息报告给对等方。</li></ol><p>会话层的许多功能被<strong>集成</strong>到了<strong>现代协议栈中的应用层或传输层协议中</strong>。例如：</p><ul><li>传输层安全（TLS）中的会话恢复： TLS（即SSL的继任者）提供了会话恢复机制，允许在短暂中断后快速恢复加密会话。</li><li><strong>HTTP Cookies</strong>： Web会话管理是应用层功能（HTTP），但其目的（跟踪用户与网站的会话状态）与会话层的概念非常相似。</li><li><strong>网络基本输入输出系统（NetBIOS）会话服务</strong>： 在Windows网络（如文件共享）中提供会话服务。</li><li><strong>远程过程调用（RPC）</strong>： RPC框架通常包含管理客户端与服务器之间“调用会话”的机制。</li><li><strong>会话启动协议（SIP）</strong>： 在VoIP和视频会议中用于建立、管理和终止多媒体会话。</li><li><strong>在TCP&#x2F;IP模型中的位置</strong>： TCP&#x2F;IP模型没有明确的会话层。会话层和表示层的功能通常被融入到TCP&#x2F;IP模型的应用层中实现。</li></ul><h3 id="举几个栗子🌰"><a href="#举几个栗子🌰" class="headerlink" title="举几个栗子🌰"></a>举几个栗子🌰</h3><ul><li>网页浏览：当你登录网站时，会通过Cookie或Session ID管理你的登录状态，确保你在浏览不同页面时保持登录。</li><li>文件传输：使用FTP下载大文件时，若网络中断，支持断点续传的功能就是会话层同步点的体现。</li><li>视频会议：协调多人音视频流，管理谁可以发言（半双工控制）。</li></ul><h3 id="在TCP-IP协议栈中的位置"><a href="#在TCP-IP协议栈中的位置" class="headerlink" title="在TCP&#x2F;IP协议栈中的位置"></a>在TCP&#x2F;IP协议栈中的位置</h3><p>OSI模型是理论框架，实际互联网使用TCP&#x2F;IP模型，其中会话层的功能分散在应用层和传输层实现：</p><ul><li>应用层协议（如<strong>HTTP、FTP、SMTP</strong>）：直接处理会话逻辑（如HTTP Cookies管理会话）。</li><li>传输层协议（如TCP）：提供连接管理（类似会话），但更侧重端到端可靠性。</li></ul><p>会话层解决的核心问题是——让通信双方的应用进程有组织、可控制地进行数据交换。</p><p>例如在线支付过程中，如果操作中断，会话层确保系统能识别中断位置并安全恢复交易流程。</p><h2 id="表示层（了解即可）"><a href="#表示层（了解即可）" class="headerlink" title="表示层（了解即可）"></a>表示层（了解即可）</h2><p>它的核心职责是<strong>解决数据格式差异问题</strong>，确保<strong>不同系统间</strong>交换的信息能被正确解析和理解。</p><p>你可以将它视为网络通信的“翻译官”或“格式转换器”。我们最可见的就是不同操作系统或应用程序使用的数据编码结构不同（如 Windows 与 Linux 的换行符差异：\r\n vs \n）。</p><ul><li>文本编码：ASCII、UTF-8（网页字符） → GBK（中文系统）的相互转换。</li><li>数值存储：大端序（Big-Endian）与小端序（Little-Endian）的转换（如Intel vs ARM处理器）。</li><li>数据加密&#x2F;解密（Encryption &amp; Decryption）在传输前对敏感信息加密，接收方解密还原。</li><li>数据压缩&#x2F;解压缩（Compression）减少网络带宽占用（如HTTP的gzip压缩）。</li></ul><p>常见技术：JSON、XML、Protocol Buffers（Protobuf）、Apache Avro。</p><p>为了更容易理解，我们假设一个场景：</p><ol><li>行系统A（使用XML）向系统B（使用JSON）发送交易数据。</li><li>系统B收到数据后，需通过表示层功能：</li></ol><ul><li>将XML → JSON（格式转换）</li><li>压缩数据（减少带宽）</li><li>用AES加密敏感字段（安全传输）</li></ul><h3 id="在TCP-IP模型中的实际实现"><a href="#在TCP-IP模型中的实际实现" class="headerlink" title="在TCP&#x2F;IP模型中的实际实现"></a>在TCP&#x2F;IP模型中的实际实现</h3><p>表示层功能被合并到应用层，由应用程序或中间件直接实现。<br>典型协议&#x2F;工具：</p><ul><li><strong>表示层功能</strong>：TCP&#x2F;IP中的实现</li><li><strong>数据加密</strong>：TLS&#x2F;SSL（如HTTPS）</li><li><strong>数据压缩</strong>：HTTP的Content-Encoding: gzip</li><li><strong>数据格式化</strong>：JSON序列化库（如Python的json模块</li><li><strong>字符编码转换</strong>：编程语言内置函数（如Python str.encode()）</li></ul><h2 id="数据链路层（了解即可）"><a href="#数据链路层（了解即可）" class="headerlink" title="数据链路层（了解即可）"></a>数据链路层（了解即可）</h2><p>主要解决问题：</p><ul><li><p>封装成帧(帧定界)</p></li><li><p>透明传输(数据中的字符被误判成控制符)</p></li><li><p>差错检验</p></li><li><p>检测比特错误，增加FCS帧校验序列，采用CRC校验方法；校验和</p></li><li><p>帧乱序、丢失、重复</p></li><li><p>帧的完整性</p></li></ul><p><strong>为什么主要功能是检查而不是纠错？</strong></p><ul><li>效率方面：检查只需要增加少量冗余信息，纠错会显著增加帧长度和计算负担，降低传输效率。</li><li>成本方面：重传机制更高效，数据链路层通常采用<strong>自动重传请求（ARQ）</strong>机制（如停等协议、滑动窗口协议）。一旦检测到错误（如CRC校验失败），直接<strong>丢弃错误帧</strong>并请求发送方重传，比实时纠错更简单可靠；在误码率较低的有线网络中（如以太网），重传成本远低于持续纠错的成本。</li><li>分层设计原则：分层模型遵循“各司其职”的分层思想。数据链路层确保帧的完整性（检错），而纠错大部分由传输层（如TCP的丢包重传）或应用层（如文件传输校验）处理。</li></ul><h1 id="💡TCP-IP四层模型"><a href="#💡TCP-IP四层模型" class="headerlink" title="💡TCP&#x2F;IP四层模型"></a>💡TCP&#x2F;IP四层模型</h1><p>不单单指TCP和IP两种模型</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation1748836122878-135b31ce-bf72-485b-91f0-90642ee8bad4.jpeg"></p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p><a href="https://www.yuque.com/yangjiangmanman/vowft6/uw0o7r8w7gergl6n?singleDoc#">《HTTP —&gt; 基于TCP》</a> </p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="TCP-—-可靠传输"><a href="#TCP-—-可靠传输" class="headerlink" title="TCP —&gt; 可靠传输"></a>TCP —&gt; 可靠传输</h3><ul><li>连接：三次握手建立连接 四次挥手终止连接</li><li>序号 确认序号 重传</li><li>流量控制</li><li>拥塞控制</li><li>分段重组</li><li>面向字节流</li></ul><h4 id="MSS：最大报文段长度"><a href="#MSS：最大报文段长度" class="headerlink" title="MSS：最大报文段长度"></a>MSS：最大报文段长度</h4><p>MSS是TCP协议引入的，设置这个是为了避免IP分片，容易导致分片丢失</p><p>IP是否需要分片是基于链路的MTU来决策的，如果当前需要传输的数据比MTU大，则需要分片</p><p>因此TCP层设置了MSS，希望双方在建立连接阶段可以沟通出来适合的分组传输大小，也就是MSS</p><p>但是并不是一定会避免分片</p><p><a href="https://www.yuque.com/yangjiangmanman/vowft6/yd2n79x4cd3axwab?singleDoc#">《TCP》</a> </p><h3 id="UDP-—-不可靠传输"><a href="#UDP-—-不可靠传输" class="headerlink" title="UDP —&gt; 不可靠传输"></a>UDP —&gt; 不可靠传输</h3><p><a href="https://www.yuque.com/yangjiangmanman/vowft6/vhs28za3dyna16w3?singleDoc#">《UDP》</a> </p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><p>以网卡数分配IP</p><p>主机号全1：某网络下所有主机，用于广播</p><p>主机号全0：指定的某个网络</p><p>单播：可以越过路由器</p><p>多播：有穿透路由的多播</p><p>广播，存在广播域，不可越过路由器</p><p>网络号相同说明在一个广播域内</p><p>子网掩码和IP地址按位与即可得出网络地址</p><h4 id="环回地址"><a href="#环回地址" class="headerlink" title="环回地址"></a>环回地址</h4><p>127.0.0.1</p><p>可断网进行测试</p><p><a href="https://www.yuque.com/yangjiangmanman/vowft6/bp3gzpaffbtc8uqg?singleDoc#">《IP》</a> </p><h2 id="区分传输层和网络层"><a href="#区分传输层和网络层" class="headerlink" title="区分传输层和网络层"></a>区分传输层和网络层</h2><p>● 传输层提供端到端的数据传输服务，确保数据的可靠传输和有序交付。</p><p>● 网络层的主要功能是通过逻辑寻址（如IP地址）将数据从源节点传输到目标节点，处理分组传输和路由选择，确保数据在网络中正确到达<strong>。</strong></p><p>网络层就像你填写了快递地址，你的物流公司会寻找你的地址送货</p><p>传输层就是采用专业的快递员给你的地址送快递，保证你的快递到达</p><h1 id="五层模型"><a href="#五层模型" class="headerlink" title="五层模型"></a>五层模型</h1><p>用于教学</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation1747894701675-32dde85e-b3c7-47b9-8d0c-da8546f13a34.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>竞赛思考方式 &amp; 学习方法</title>
    <link href="/2025/06/01/%E7%AB%9E%E8%B5%9B%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F%20&amp;%20%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%20(copy)/"/>
    <url>/2025/06/01/%E7%AB%9E%E8%B5%9B%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F%20&amp;%20%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%20(copy)/</url>
    
    <content type="html"><![CDATA[<h1 id="竞赛思考方式-学习方法"><a href="#竞赛思考方式-学习方法" class="headerlink" title="竞赛思考方式 &amp; 学习方法"></a>竞赛思考方式 &amp; 学习方法</h1><p>给自己的一些反思！</p><h2 id="1-对一切事物保持怀疑"><a href="#1-对一切事物保持怀疑" class="headerlink" title="1. 对一切事物保持怀疑"></a>1. 对一切事物保持怀疑</h2><p>不要太过于相信博客和ai的话， 只有自己<mark>做证实</mark>让自己<mark>找到信服的条件</mark>才能真正理解代码背后的含义</p><p>要自己形成思维空间，如果只是一味的接受和采纳，很容易出现思维惯性，缺少类似“<strong>凭什么？怎么这么写就行，我这样就不行</strong>？”的自我反问</p><h2 id="2-怎么锻炼思考方式？"><a href="#2-怎么锻炼思考方式？" class="headerlink" title="2. 怎么锻炼思考方式？"></a>2. 怎么锻炼思考方式？</h2><ul><li>首先，我们在接收的知识内容时，实际上是<strong>直接传授我们一个最好的题解</strong>，例如最近图论学习的代码，基本上都是套用最开始的 dfs 和 bfs 的算法模板，时间不够，而且这样教学会使学习效果最好、效率最高，因此我们会<mark>忽略</mark>一开始的模板背后隐藏的一些弯弯绕绕，其实如果自己理解的时候，我们肯定是<strong>不会直接找到</strong>最好的解决方案对吧，会写错好多版方案，其实在这些错误当中，就蕴含了你对这个代码的自我理解，也就是为什么我们应该自己把代码敲一遍，在敲一遍的过程就会把大体思维捋顺，当然也会产生一些自己的新想法：<ul><li>清楚代码每一步的<mark>目的</mark>也就是需求</li><li>为什么这样做就可以达到目的？有没有其他更好的方案？我自己想的方案和博客的有什么不同？我这个是不是比TA的更好？如果不好，是哪里比不上，为什么他的代码就更好，是怎么想到要这么做的？要经常的<mark>对比</mark>，向更好的代码<mark>模仿</mark>学习，不仅是代码，更是思考方式，在通过无数个自我质疑当中得到升华。</li><li>👆从结构性、数据结构、功能剥离等等<strong>角度</strong> 要准确说出代码哪里的好坏，勇敢的指出来</li><li>在刷题时也是，一定会出现有一个阶段是思维while(1)。<strong>不要害怕</strong>，每个人都会存在这个现象，只要记住每一次的卡壳都是我们升级的门槛，过了这个阶段，还会有下一个门槛（&#x2F;doge）。对于这种思维固化，最好的办法是找到一个空闲的时间把上课的内容模拟出来，从头到尾。</li><li>我们不会永远的有人教我们写，所以刷题写不出来的时候，别人的<strong>题解和ai</strong>给出的方案就是我们学习最好的老师，<mark>多去翻看（不仅是这些还有各种代码的社区，也要经常浏览，可以从csdn开始）</mark>，这时候我们可能还会看到别人写的不如我们的内容，好坏都要看，坏的代码也可以和自己的思路进行对比，差的代码你都能理解他的含义，说明你对代码的掌控能力是非常强壮的，而且如果你能<strong>一眼看到它的缺点</strong>就说明下次在你的代码中你是会<mark>自动避免</mark>这个错误的（也就是我们常说的肌肉记忆）。写不出来和写出来都要去看，不能说写不出来，看别人的思维看懂了就算会了，不，不要相信自己的大脑和手，同样的思路下写出的内容可能会漏洞百出。</li><li>甚至连每一个自己更新的版本都要事后做总结和对比，一开始我是什么状态，在不断的更改错当中我又是什么状态，我是怎么一步一步走向成功并且写出优雅的代码的，一旦想出来一次，后续就会顺利很多，管管难过关关过啦~</li><li>多用工具多动笔，画图还是在纸上写出来下一步都可以</li><li>请一定要多多问自己为什么！</li></ul></li></ul><h2 id="3-抽象思维模型"><a href="#3-抽象思维模型" class="headerlink" title="3. 抽象思维模型"></a>3. 抽象思维模型</h2><p>纵深的方向都要去扩展，也就是我们常说的：有思路也不一定能写出来</p><ul><li>纵代表要在宏观上去把控整体的思路流程以及题面的广泛程度</li><li>深代表你可以通过这个思路去掌控代码，选择什么数据结构，如何<strong>优化</strong></li></ul><p>两者都重要！并且是相互促进，深的联系挖掘可以促进纵的广度，纵的思考角度可以决定深的简洁优雅</p><h2 id="4-扎实基础"><a href="#4-扎实基础" class="headerlink" title="4. 扎实基础"></a>4. 扎实基础</h2><p>有想法是因为联系的快，什么是联系，当每个<mark>基础</mark>工作都做的足够<mark>坚实</mark>，就会很容易将这些工具的通点联系在一起，熟记数据结构的特性、功能。就比如昨天的查找文献，用set用的足够多，就能一下子想到它是用来去重排序的，和这道题好像，我应该怎么结合？</p><p>做思维导图和语法对比可以帮助快速联系</p><p>（比如各种语言都有共通性和特性，进入微观当中就是例如指针和引用的相同点和区别、set和map，vector等数据结构都有相似的.insert()类似的函数或者迭代器，区别就是功能不同）</p><p>而且过一段时间可以回去写写基础题，你别说，还真不一定能自己写出来呢，而且虽然已经到达非基础高度了，就应该严格要求自己，哪些题是要一遍就必须写对的，一遍写不对就要嘲讽自己一下(确信还是不行)</p><h2 id="5-练的太少"><a href="#5-练的太少" class="headerlink" title="5. 练的太少"></a>5. 练的太少</h2><p>以上那些都直指痛点，本质上就是看代码太少，写代码太少</p><blockquote><p>少点cv，多点手写，世界会更美好（bushi）</p></blockquote><p>放心吧，练习是不会亏待你自己的</p><p>就算写不出新的题，就像dfs和bfs的模板 一遍一遍的自己去一边思考一边去写也是温故知新，练习的过程中<mark>常写常新</mark>，每次都会获得到上次没有的思考（前提是不要去背代码，真的是自己要考虑下一步怎么写才能满足最终目标），不是有一句话嘛，对于目标的渴求是促使你每一步的行动（至于行动的好坏就要回到2逐步锻炼），放到代码里也是一样的</p><ul><li>如果太久没练习题，可以选择从模拟题开始做起，例如2025年所有的星期日的日期打印，这样是最好回归状态的解决方案</li><li>学会分辨并且找类型题（这个过程中也锻炼了自己看到题目基本上知道使用什么算法的能力，也方便自己快速找到一道陌生题的初始方向）， 同一种练习题至少要写10道左右，大概持续3天，才能基本保证不会忘的太快</li></ul><p>抛个俺的示例（其实这个笔记我也荒废了很久）：<a href="https://flowus.cn/3049c01f-5ec2-44cc-b6ad-83adee59c08b">https://flowus.cn/3049c01f-5ec2-44cc-b6ad-83adee59c08b</a></p><h2 id="6-来个激励视频吧"><a href="#6-来个激励视频吧" class="headerlink" title="6. 来个激励视频吧"></a>6. 来个激励视频吧</h2><p>提升一下数学情怀：</p><p><a href="https://www.bilibili.com/video/BV1rr4y1b7cu">https://www.bilibili.com/video/BV1rr4y1b7cu</a></p><h2 id="7-以为我说完了？并没有，总结！！"><a href="#7-以为我说完了？并没有，总结！！" class="headerlink" title="7. 以为我说完了？并没有，总结！！"></a>7. 以为我说完了？并没有，总结！！</h2><p>对呀，以上是我的总结，你的总结哪去了</p><p>这篇文章看完啦，你的想法呢，能够脱离这篇文章把自己的构成的想法总结成另一篇文章嘛，cv不行的哦~</p><p>学习总结 + 看别人怎么说 + 别人说说完的是你的吗 + 自己写总结</p><p>一定可以的，一定能够达到高处的，给自己加油小秦！</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows11使用Docker部署Hbase超详细过程</title>
    <link href="/2025/05/20/Windows11%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Hbase%E8%B6%85%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B%20(copy)/"/>
    <url>/2025/05/20/Windows11%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Hbase%E8%B6%85%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B%20(copy)/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows11使用Docker部署Hbase超详细过程"><a href="#Windows11使用Docker部署Hbase超详细过程" class="headerlink" title="Windows11使用Docker部署Hbase超详细过程"></a>Windows11使用Docker部署Hbase超详细过程</h1><blockquote><p>导入：虽然有虚拟机，但是懒得再配啦，还没玩过Docker，这回玩一下</p><p>没有虚拟机还想在windows部署Hbase的有福啦</p><p><strong>优势</strong></p><ul><li>无需手动安装 Java 或配置环境变量</li><li>一键启动 HBase + Thrift 服务</li></ul></blockquote><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>安装很简单啊，一点不用怕的</p><p>下载网址：<a href="https://www.docker.com/"></a></p><p>下载产品是Docker Desktop</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation20250421204302.png"></p><p>安装此处省略……(没有什么需要注意的，如果实在怕自己安装有问题可以搜以下如何安装Docker)</p><p>安装好之后再注册一下或者直接使用github账号也没问题，之后就会出现以下页面</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation20250421204323.png"></p><p>记得把左下角这个小东西启动起来</p><p>接下来就可以部署Hbase了👇</p><h2 id="部署Hbase步骤"><a href="#部署Hbase步骤" class="headerlink" title="部署Hbase步骤"></a>部署Hbase步骤</h2><p>在命令行操作，以管理员身份运行</p><ul><li><p>拉取Hbase镜像</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull harisekhon/hbase<br></code></pre></td></tr></table></figure><p>  <img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation20250421204330.png"></p><blockquote><p>首次拉取不是这样的，但是差不多  </p></blockquote></li><li><p><strong>启动容器（包含 HBase + Thrift 服务）</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d -p 9090:9090 -p 8080:8080 --name hbase harisekhon/hbase<br></code></pre></td></tr></table></figure></li></ul><p>​<code>-p 9090:9090</code>: 映射 Thrift 端口（Python 通过此端口连接）</p><p>​<code>-p 8080:8080</code>: HBase Web UI 端口</p><p>​注意这里是你一会要用到的端口</p><p>​<img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation20250421204335.png"></p><p>此时再去查看你的Docker界面就会发现多出来点东西，这就是你刚刚启动成功的效果</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation20250421204340.png"></p><ul><li><p><strong>验证容器状态</strong></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps -a<br></code></pre></td></tr></table></figure></li></ul><p>​确认容器状态为 Up</p><p>​<img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation20250421204346.png"></p><p>通过以上步骤你的Docker就成功部署好Hbase啦（为了完成NoSQL偷点懒没关系吧QAQ）</p><h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><p>我写个作业简单测试一下：</p><p>简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> happybase<br><br>TABLE_NAME = <span class="hljs-string">&#x27;mytable&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">connect</span>():<br>    <span class="hljs-keyword">return</span> happybase.Connection(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">9090</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_table</span>():<br>    conn = connect()<br>    <span class="hljs-keyword">if</span> TABLE_NAME.encode() <span class="hljs-keyword">in</span> conn.tables():<br>        conn.delete_table(TABLE_NAME, disable=<span class="hljs-literal">True</span>)<br>    conn.create_table(TABLE_NAME, &#123;<br>        <span class="hljs-string">&#x27;mycf&#x27;</span>: <span class="hljs-built_in">dict</span>()<br>    &#125;)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;表 <span class="hljs-subst">&#123;TABLE_NAME&#125;</span> 创建成功，初始列族为 mycf&quot;</span>)<br>    conn.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_table</span>():<br>    conn = connect()<br>    <span class="hljs-keyword">if</span> TABLE_NAME.encode() <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> conn.tables():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;表 <span class="hljs-subst">&#123;TABLE_NAME&#125;</span> 不存在，无法修改列族&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    families = conn.table(TABLE_NAME).families()<br><br>    new_families = &#123;&#125;<br>    <span class="hljs-keyword">for</span> cf <span class="hljs-keyword">in</span> families:<br>        <span class="hljs-keyword">if</span> cf == <span class="hljs-string">b&#x27;mycf&#x27;</span>:<br>            new_families[<span class="hljs-string">&#x27;mycf&#x27;</span>] = &#123;<span class="hljs-string">&#x27;max_versions&#x27;</span>: <span class="hljs-number">5</span>&#125;<br>        <span class="hljs-keyword">else</span>:<br>            new_families[cf.decode()] = &#123;&#125;<br><br>    new_families[<span class="hljs-string">&#x27;newcf&#x27;</span>] = &#123;&#125;<br>    conn.delete_table(TABLE_NAME, disable=<span class="hljs-literal">True</span>)<br>    conn.create_table(TABLE_NAME, new_families)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成功添加列族 newcf，并修改 mycf 的 max_versions 为 5&quot;</span>)<br>    conn.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_data</span>():<br>    conn = connect()<br>    table = conn.table(TABLE_NAME)<br>    table.put(<span class="hljs-string">b&#x27;row1&#x27;</span>, &#123;<span class="hljs-string">b&#x27;mycf:col1&#x27;</span>: <span class="hljs-string">b&#x27;value1&#x27;</span>&#125;)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据插入成功（如果取消注释 insert_data()）&quot;</span>)<br>    conn.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_table</span>():<br>    conn = connect()<br>    <span class="hljs-keyword">if</span> TABLE_NAME.encode() <span class="hljs-keyword">in</span> conn.tables():<br>        conn.delete_table(TABLE_NAME, disable=<span class="hljs-literal">True</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;列族 mycf 已删除&quot;</span>)  <span class="hljs-comment"># 只能通过删表实现删除列族</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;表 <span class="hljs-subst">&#123;TABLE_NAME&#125;</span> 已删除&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;表 <span class="hljs-subst">&#123;TABLE_NAME&#125;</span> 不存在&quot;</span>)<br>    conn.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    create_table()<br>    modify_table()<br>    <span class="hljs-comment"># insert_data()  # ← 你可以取消这行注释来测试插入数据</span><br>    delete_table()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation20250421204352.png"></p><p>得到了正确的输出！</p>]]></content>
    
    
    <categories>
      
      <category>零七八碎儿~</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随便玩点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xv6的基本使用</title>
    <link href="/2025/05/01/xv6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%20(copy)/"/>
    <url>/2025/05/01/xv6%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%20(copy)/</url>
    
    <content type="html"><![CDATA[<h1 id="xv6的基本使用"><a href="#xv6的基本使用" class="headerlink" title="xv6的基本使用"></a>xv6的基本使用</h1><p>xv6 是一个教学用的简化版 Unix 操作系统，常用于操作系统课程学习。它需要 <strong>QEMU</strong> 来模拟硬件环境，而 <code>make qemu-nox</code> 是一个自动化命令，用于<strong>编译并启动 xv6 系统</strong>。</p><p>基本流程：在xv6的目录下创建.c文件 —–&gt; vim&#x2F;Vscode编写代码 —–&gt; 打开Makefile将编写的文件名加入到UPROGS当中 —–&gt; 编译该文件 —–&gt; 对该目录进行编译 —–&gt; 使用qemu命令启动xv6操作系统 —–&gt;执行文件</p><ul><li><p>更改Makefile文件</p><p>例如你的文件名为<code>test</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">UPROGS=\<br>  _cat\<br>  _ls\<br>  _myprogram\<br>  ...<br>  _test\<br></code></pre></td></tr></table></figure><p>这样就修改完成了</p></li><li><p>编译文件命令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用32位模式编译（需安装gcc-multilib）</span><br>gcc -m32 -o <span class="hljs-built_in">test</span> test.c<br></code></pre></td></tr></table></figure></li><li><p>编译xv6命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure></li><li><p>运行xv6命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make qemu-nox<br></code></pre></td></tr></table></figure></li><li><p>当编译时出现问题，可以先将已编译部分清空，再重试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make clean<br></code></pre></td></tr></table></figure></li></ul><p>第一次接触操作系统的朋友可以稍微了解一下常用指令</p><p>vim的操作</p><p>写入文件：i（可以看见左下角变成了插入）</p><p>保存文件：退出插入模式按下<code>Esc</code>，输入<code>:wq</code></p><p>……</p>]]></content>
    
    
    <categories>
      
      <category>零七八碎儿~</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随便玩点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>临时变量与const</title>
    <link href="/2025/02/06/%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E4%B8%8Econst/"/>
    <url>/2025/02/06/%E4%B8%B4%E6%97%B6%E5%8F%98%E9%87%8F%E4%B8%8Econst/</url>
    
    <content type="html"><![CDATA[<h1 id="临时对象（临时变量）"><a href="#临时对象（临时变量）" class="headerlink" title="临时对象（临时变量）"></a>临时对象（临时变量）</h1><p>临时变量在代码中不体现，并且也没有名字的变量</p><p>临时对象的产生条件（2）：</p><p> 函数调用时所发生的隐式类型转换<br> 调用函数产生的返回值</p><p>核心：临时对象天生规定是<code>const</code>类型，因此在进行对临时变量进行传参或者修改值是会发生一些错误，比如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>;<br><span class="hljs-built_in">bar</span>(string &amp;a);<br><span class="hljs-built_in">bar</span>(<span class="hljs-built_in">foo</span>());非法操作，像这种就是明显的不熟悉临时对象的特点<br></code></pre></td></tr></table></figure><p>让我们来详细理解一下上述代码</p><ol><li>函数返回临时对象：</li></ol><p>foo() 是一个返回 string 对象的函数。当调用 foo() 时，它会返回一个临时的 <code>string</code> 对象。在C++中，临时对象是 <code>const</code> 类型的，这意味着它们不能被修改。</p><ol start="2"><li>函数参数类型：</li></ol><p>bar(string&amp; s) 这个函数的参数是一个非 <code>const</code> 的 <code>string</code>引用。这意味着 bar 函数期望接收一个可以修改的 string 对象的引用。</p><ol start="3"><li>问题所在：</li></ol><p>当你调用 bar(foo()) 时，foo() 返回的是一个临时的 string 对象。由于<mark>临时对象是 const</mark> 的，你<mark>不能将一个 <code>const</code> 临时对象传递给一个期望 <code>非const</code> 引用</mark>的函数参数。</p><p>换句话说，bar 函数期望接收一个可以修改的 string 引用，但你传递给它的是一个不可修改的临时对象，这会导致编译错误。</p><ol start="4"><li>解决方法：</li></ol><p>如果想要 bar 函数能够接受临时对象，可以将参数改为 const 引用，即 <code>void bar(const string&amp; s)</code>。这样，bar 函数就可以接受临时对象，因为它承诺不会修改传入的 string 对象。但与此同时参数不可更改</p><p>上述解释的核心点在于把一个 <code>const</code> 的引用绑定到给一个 <code>非const</code> 引用类型是不允许的</p><h1 id="搞清const变量拷贝和const引用绑定"><a href="#搞清const变量拷贝和const引用绑定" class="headerlink" title="搞清const变量拷贝和const引用绑定"></a>搞清const变量拷贝和const引用绑定</h1><p>！但请千万注意，以上内容都是基于 const引用 来说明的，并不说明 const 类型的变量不可以赋值给 非const 类型<br> const 类型赋值给非 const 类型<br>直接赋值（值拷贝）是允许的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> y = x;   正确：<span class="hljs-type">const</span> 的值可以拷贝给非 <span class="hljs-type">const</span> 变量<br></code></pre></td></tr></table></figure><p> 这里，x 是一个 const 变量，它的值被拷贝到非 const 变量 y。这是允许的，因为拷贝操作不会影响原始的 const 变量。</p><p> 绑定引用是不允许的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>&amp; y = x;   错误：不能将 <span class="hljs-type">const</span> 绑定到非 <span class="hljs-type">const</span> 引用<br></code></pre></td></tr></table></figure><p> 这里，x 是一个 const 变量，尝试将其绑定到非 const 引用 y 会导致编译错误。这是因为如果允许这样做，就可以通过 y 修改 x，从而破坏 const 的承诺。</p><p> 为什么绑定引用不允许？<br><code>const</code> 是一种承诺，表示“我不会修改这个值”。</p><p>如果将 const 变量绑定到非 const 引用，就相当于允许通过该引用修改 const 变量，这违反了 const 的语义。</p><p>准确的表述<br>允许：将 const 类型的值拷贝给非 const 变量。<br>不允许：将 const 类型的变量绑定到非 const 引用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>值拷贝：const 的值可以赋值给非 const 变量，因为这只是复制值，不会影响原始的 const 变量。</p><p>引用绑定：const 的变量不能绑定到非 const 引用，因为这会允许通过引用修改 const 变量，违反 const 的语义。</p>]]></content>
    
    
    <categories>
      
      <category>零七八碎儿~</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++的边边角角</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图论基础</title>
    <link href="/2025/02/06/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/02/06/%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="图论基础"><a href="#图论基础" class="headerlink" title="图论基础"></a>图论基础</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>由<strong>顶点v</strong>和<strong>边e</strong>构成的集合，记G&#x3D;(v,e)</p><h2 id="其他重要概念"><a href="#其他重要概念" class="headerlink" title="其他重要概念"></a>其他重要概念</h2><ul><li><p>路径：一个顶点到达另一个顶点途径的点构成的序列</p></li><li><p>边权：边的权重（在不同场景下意义不同）</p><p>在求最短路问题中，权重可以代表距离；在网络流问题中，权重可以代表流量…</p></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>有向图、无向图、有权图、无权图、连通图······</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>导航、网络拓扑图、电路图、游戏地图、自动寻踪</p><h1 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h1><h2 id="1-邻接矩阵"><a href="#1-邻接矩阵" class="headerlink" title="1. 邻接矩阵"></a><strong>1. 邻接矩阵</strong></h2><blockquote><p>采用数据结构：二维数组</p><p>存储思路：存储的是邻接（居）点</p><p>有边置1 无边置0 <mark>无向图要注意双向标注</mark></p></blockquote><p>例如给出这样一张图</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation6mwh.png"></p><ul><li><strong>邻接矩阵的输入</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e2</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-comment">//如果i,j顶点之间有边  g[i][j]=1</span><br><span class="hljs-comment">//如果i,j顶点之间没边  g[i][j]=0</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n,m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-comment">//控制台输入</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin &gt;&gt; u &gt;&gt; v;<br>        g[u][v] = g[v][u] = <span class="hljs-number">1</span>;<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>找到指定点的所有邻接点</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> v; cin &gt;&gt; v;<br><span class="hljs-type">int</span> n = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">if</span> (g[v][i] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//i是v的邻接点</span><br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>找到邻接矩阵所有的边</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">1</span>; v &lt;= n; v++) &#123;<span class="hljs-comment">//固定v</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= n; u++) &#123;<span class="hljs-comment">//找到v的所有邻接点u</span><br><span class="hljs-keyword">if</span> (g[u][v] == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//v是u的邻接点</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d,%d) &quot;</span>, u, v);<br>&#125;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p><mark><strong>性能</strong></mark></p><ul><li>时间复杂度：（遍历所有的边）$O(n^2)$</li><li>空间复杂度：$O(n^2)$</li></ul><h2 id="2-邻接表（优化）"><a href="#2-邻接表（优化）" class="headerlink" title="2. 邻接表（优化）"></a><strong>2. 邻接表</strong>（优化）</h2><blockquote><p>采用数据结构：一维数组（外层）+ 动态数组vector（内层） </p><p><mark><code>vector&lt;int&gt; g[N];</code></mark></p><p><mark>g[i]是一个vector，存储了i号点所有邻接点</mark></p></blockquote><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationpEegLqA.png"></p><p>我们将一开始的图按照数据结构抽象成这种形式，以上述图为例:</p><ul><li><strong>邻接表的输入方式</strong></li></ul><p>vector增加元素使用push_back()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e2</span> + <span class="hljs-number">10</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; g[N];   <span class="hljs-comment">//g[i]是一个vector，存储了i号点所有邻接点</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;<span class="hljs-comment">//n个顶点 m条边</span><br><span class="hljs-comment">//邻接m条边,每条边遍历一遍</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br><span class="hljs-type">int</span> u, v; <br>        cin &gt;&gt; u &gt;&gt; v;<span class="hljs-comment">//u-v之间有边</span><br>g[u].<span class="hljs-built_in">push_back</span>(v);  g[v].<span class="hljs-built_in">push_back</span>(u);  <span class="hljs-comment">//无向图</span><br><span class="hljs-comment">//g[u].push_back(v);   //有向图</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>邻接表边的遍历</strong></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e2</span> + <span class="hljs-number">10</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; g[N];<span class="hljs-comment">//g[i]是一个vector，存储了i号点所有邻接点</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> n, m; cin &gt;&gt; n &gt;&gt; m;<span class="hljs-comment">//n个顶点m条边</span><br><span class="hljs-comment">//邻接m条边</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br><span class="hljs-type">int</span> u, v; <br>        cin &gt;&gt; u &gt;&gt; v;<span class="hljs-comment">//u-v之间有边</span><br>g[u].<span class="hljs-built_in">push_back</span>(v);  g[v].<span class="hljs-built_in">push_back</span>(u);  <span class="hljs-comment">//无向图</span><br><span class="hljs-comment">//g[u].push_back(v);   //有向图</span><br>&#125;<br><br><span class="hljs-comment">//找出图中所有的边</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<span class="hljs-comment">//固定i</span><br><span class="hljs-comment">//找到顶点i的所有邻接点</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; g[i].<span class="hljs-built_in">size</span>(); j++) &#123;<br><span class="hljs-type">int</span> v = g[i][j];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d,%d) &quot;</span>, i, v);<br>&#125;<br>        cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><mark><strong>性能</strong></mark></p><ul><li><p>时间复杂度：（遍历所有的边）$O(n+m)$</p></li><li><p>空间复杂度：$O(m)$</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL四种写操作导致数据不一致策略(未完结)</title>
    <link href="/2025/02/01/%E5%9B%9B%E7%A7%8D%E5%86%99%E6%93%8D%E4%BD%9C%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%AD%96%E7%95%A5%20(copy)/"/>
    <url>/2025/02/01/%E5%9B%9B%E7%A7%8D%E5%86%99%E6%93%8D%E4%BD%9C%E5%AF%BC%E8%87%B4%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%AD%96%E7%95%A5%20(copy)/</url>
    
    <content type="html"><![CDATA[<h1 id="先更新数据库再更新缓存"><a href="#先更新数据库再更新缓存" class="headerlink" title="先更新数据库再更新缓存"></a>先更新数据库再更新缓存</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>简单，代码逻辑直观</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>线程安全问题：多个线程<mark>同时更新数据</mark>&gt;时，可能会导致缓存与数据库不一致</li></ol><ul><li>线程A更新了数据库</li></ul><ul><li>线程B也更新了数据库，并且先于线程A更新了缓存</li><li>线程A随后更新缓存，此时缓存中的数据会变成线程A的旧数据，而数据库中是线程B的新数据，导致数据不一致</li></ul><ol start="2"><li>并发读写问题：<mark>缓存失效</mark>，A读取缓存，此时缓存失效，进而读取数据库的值，在A更新缓存之前，就在此时线程B更新了数据库的值，并且将缓存的值进行了更新，随后A又进行了缓存的更新，那么线程A写入的旧值会覆盖线程B的新值。所以此时数据库是更新好的值，而缓存是旧值，就会出现数据不一致的情况</li></ol><p>（1. 2. 说的差不多：A.mysql —&gt; B.mysql —&gt; B.redis —&gt; A.redis）</p><ol start="3"><li>性能浪费：</li></ol><ul><li>写多读少，缓存被频繁更新但很少被读取</li><li>缓存数据需要通过复杂计算生成，写入缓存会增加不必要的开销</li></ul><h2 id="改进策略"><a href="#改进策略" class="headerlink" title="改进策略"></a>改进策略</h2><h1 id="先更新缓存再更新数据库"><a href="#先更新缓存再更新数据库" class="headerlink" title="先更新缓存再更新数据库"></a>先更新缓存再更新数据库</h1><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><p>缓存更新快，能够更快速的响应服务器的请求，更新速度快</p><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ol><li>有数据库更新失败风险：导致数据不一致</li><li>线程安全问题：（A.redis —&gt; B.redis —&gt; B.mysql —&gt; A.mysql ））</li><li>写入性能瓶颈：每次写操作都需要同步更新缓存和数据库，可能导致写入性能下降，尤其是当数据库操作较慢时</li></ol><h1 id="先删除缓存再更新数据库"><a href="#先删除缓存再更新数据库" class="headerlink" title="先删除缓存再更新数据库"></a>先删除缓存再更新数据库</h1><h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><ul><li><p>能够有效避免缓存当中的旧数据被读取</p></li><li><p>实现简单（删除缓存是一个简单操作）</p></li></ul><h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><ol><li>有可能缓存删除失败导致数据不一致</li><li>存在长期的脏数据：</li></ol><p>​假设线程A执行“先删除缓存再更新数据库”的操作，同时线程B执行读操作，可能的执行顺序如下：</p><ul><li>线程A删除缓存。</li><li>线程B查询缓存，发现缓存已删除。</li><li>线程B查询数据库，获取旧数据。</li><li>线程B将旧数据写入缓存。</li><li>线程A更新数据库。</li></ul><p>​此时，数据库中存储的是新数据，而缓存中存储的是旧数据，导致数据不一致。这种情况下，缓存中的旧数据被称为“脏数据”。</p><h2 id="改进策略-1"><a href="#改进策略-1" class="headerlink" title="改进策略"></a>改进策略</h2><h3 id="延时双删：解决脏数据"><a href="#延时双删：解决脏数据" class="headerlink" title="延时双删：解决脏数据"></a>延时双删：解决脏数据</h3><p>先删除缓存 —&gt; 更新数据库（设置延时） —&gt; 删除缓存</p><h3 id="示例场景"><a href="#示例场景" class="headerlink" title="示例场景"></a>示例场景</h3><p>假设线程A和线程B同时执行以下操作：</p><ol><li><strong>线程A</strong>：<ul><li>删除缓存。</li><li>更新数据库。</li><li>延时1秒后再次删除缓存。</li></ul></li><li><strong>线程B</strong>：<ul><li>在线程A删除缓存后，线程B查询缓存发现数据不存在。</li><li>线程B查询数据库，获取旧数据并写入缓存。</li></ul></li></ol><p><strong>分析</strong>：</p><ul><li>在线程A更新数据库之前，线程B可能已经将旧数据写入缓存。</li><li>线程A更新数据库后，旧数据仍然存在于缓存中。</li><li>线程A延时1秒后再次删除缓存，清理了线程B回填的旧数据。</li><li>此时，缓存中没有数据，后续的读操作将直接从数据库获取最新数据。</li></ul><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>在删除缓存之后 更新数据库之前这段时间内过来的读请求 也会把旧数据写回缓存中。此时数据就会不一致，不一致的时间取决于<strong>数据库的更新时间</strong>。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>延时时间需要根据业务的请求时间（读请求）来定，否则也会存在在第二次删除之后读请求还未结束，又把旧数据写回缓存，导致依然存在脏数据的问题。</p><h1 id="先更新数据库再删除缓存"><a href="#先更新数据库再删除缓存" class="headerlink" title="先更新数据库再删除缓存"></a>先更新数据库再删除缓存</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ul><li><p>数据不一致的时间窗口短</p></li><li><p>有效避免了缓存击穿</p><p>由于删除操作是在数据库更新后执行的，因此再有大量请求时，在第一个读请求后就会写回缓存，后续读取缓存即可，就不会有大量的请求打到数据库上</p></li></ul><h2 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h2><ul><li>也会产生一部分的数据不一致的时间，但是会大大缩短</li></ul><p>数据不一致的时机：更新完数据库后，删除缓存前。这一段时间是数据不一致的，但是由于缓存删除的时间要比数据更新的时间快多了，因此数据不一致的时间窗口非常短暂。</p><ul><li>也会存在缓存删除失败</li></ul><p><mark>一定要考虑业务场景和成本再进行选择这四种策略，一般朴素的就够用， 因为本身数据库的更新就比写入缓存时间长</mark></p><h1 id="如何解决缓存删除失败？"><a href="#如何解决缓存删除失败？" class="headerlink" title="如何解决缓存删除失败？"></a>如何解决缓存删除失败？</h1>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL-Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程基础07</title>
    <link href="/2024/09/25/07/"/>
    <url>/2024/09/25/07/</url>
    
    <content type="html"><![CDATA[<h1 id="多层枚举嵌套"><a href="#多层枚举嵌套" class="headerlink" title="多层枚举嵌套"></a>多层枚举嵌套</h1><blockquote><p>没什么思路先进行暴力搜索</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 多层嵌套枚举</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 1.两个骰子，求所有排列方案</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">6</span>; j++)&#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;)&quot;</span>;<br>        &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><br><br><span class="hljs-comment">// 2.枚举2024年的每一天</span><br><br><span class="hljs-type">int</span> months[<span class="hljs-number">13</span>] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span> ,<span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= months[i]; j++)&#123;<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;月&quot;</span> &lt;&lt; j &lt;&lt; <span class="hljs-string">&quot;号 &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-comment">// 3.三位数，数位每一位不超过n且不相等，而且该三位数是奇数</span><br><br><span class="hljs-type">int</span> n = <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">100</span>; i &lt;= <span class="hljs-number">999</span>; i++)&#123;<span class="hljs-comment">// 条件</span><br>    <span class="hljs-comment">// a b c</span><br>    <span class="hljs-comment">//枚举百位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-comment">// 枚举十位</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++)&#123;<br>            <span class="hljs-comment">// 枚举个位</span><br>            <span class="hljs-keyword">if</span> (i == j) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过当前循环，继续下一次循环</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k += <span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (i != k &amp;&amp; j != k) cout &lt;&lt; i * <span class="hljs-number">100</span> + j * <span class="hljs-number">10</span> + k &lt;&lt; endl;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><h2 id="679-计算自己活了多少天"><a href="#679-计算自己活了多少天" class="headerlink" title="679 计算自己活了多少天"></a>679 计算自己活了多少天</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> months[<span class="hljs-number">13</span>] = &#123; <span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span> ,<span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">addOne</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> days = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; month; i++)<br>&#123;<br>days += months[i];<br>&#125;<br><span class="hljs-keyword">if</span> (month &gt; <span class="hljs-number">2</span>)<br>&#123;<br>days += <span class="hljs-built_in">addOne</span>(year);<br>&#125;<br>days += day;<br><span class="hljs-keyword">return</span> days;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 1.定义变量，输入</span><br><span class="hljs-type">int</span> birthyear, birthmonth, birthday;<br><span class="hljs-type">int</span> nowyear, nowmonth, nowday;<br>cin &gt;&gt; birthyear &gt;&gt; birthmonth &gt;&gt; birthday;<br>cin &gt;&gt; nowyear &gt;&gt; nowmonth &gt;&gt; nowday;<br><br><span class="hljs-comment">// 2.计算整年的天数</span><br><span class="hljs-type">int</span> days = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = birthyear; i &lt; nowyear; i++)<br>&#123;<br><span class="hljs-comment">// 1. 365</span><br><span class="hljs-comment">// 2. 闰年+1</span><br>days += <span class="hljs-number">365</span> + <span class="hljs-built_in">addOne</span>(i);<br>&#125;<br><br><span class="hljs-comment">// 3.减去出生那年的天数</span><br>days -= <span class="hljs-built_in">func</span>(birthyear, birthmonth, birthday);<br><br><span class="hljs-comment">// 4.加上现在这年的天数</span><br>days += <span class="hljs-built_in">func</span>(nowyear, nowmonth, nowday);<br>cout &lt;&lt; days &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1601-求正整数2和n之间的完全数"><a href="#1601-求正整数2和n之间的完全数" class="headerlink" title="1601 求正整数2和n之间的完全数"></a>1601 求正整数2和n之间的完全数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 判断是否是完全数</span><br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j++)<br>&#123;<br><span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>)<br>&#123;<br>sum += j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum == i;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(i))<br>&#123;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1604-亲和数"><a href="#1604-亲和数" class="headerlink" title="1604 亲和数"></a>1604 亲和数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fac_sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; x; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>&#123;<br>sum += i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;; a++)<br>&#123;<br><span class="hljs-type">int</span> b = <span class="hljs-built_in">fac_sum</span>(a);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">fac_sum</span>(b) == a &amp;&amp; a != b)<br>&#123;<br>cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++03</title>
    <link href="/2024/09/22/C++03/"/>
    <url>/2024/09/22/C++03/</url>
    
    <content type="html"><![CDATA[<h1 id="函数提高"><a href="#函数提高" class="headerlink" title="函数提高"></a><strong>函数提高</strong></h1><h2 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a><strong>函数默认参数</strong></h2><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：返回值类型  函数名 （参数 &#x3D; 默认值）{}<br>**注意事项：</p><ol><li>如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</li><li>如果函数声明有默认值，函数实现的时候就不能有默认参数**</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> c = <span class="hljs-number">10</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span><br><span class="hljs-comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; <span class="hljs-built_in">func</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>) &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ret = &quot;</span> &lt;&lt; <span class="hljs-built_in">func</span>(<span class="hljs-number">100</span>) &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a><strong>函数重载</strong></h2><h3 id="函数重载概述"><a href="#函数重载概述" class="headerlink" title="函数重载概述"></a>函数重载概述</h3><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><p>​                ● 同一个作用域下</p><p>​                ● 函数名称相同</p><p>​                ● 函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></p><p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件（在编程语言中，函数重载是根据函数的参数列表来区分不同的函数实现的，而不是根据函数的返回值。换句话说，不能仅仅因为两个函数的返回值类型不同，就认为它们是重载的。）</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//函数重载需要函数都在同一个作用域下</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,<span class="hljs-type">double</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">double</span> a ,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//函数返回值不可以作为函数重载条件</span><br><span class="hljs-comment">//int func(double a, int b)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span><br><span class="hljs-comment">//&#125;</span><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-built_in">func</span>();<br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">3.14</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>,<span class="hljs-number">3.14</span>);<br><span class="hljs-built_in">func</span>(<span class="hljs-number">3.14</span> , <span class="hljs-number">10</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数重载注意事项"><a href="#函数重载注意事项" class="headerlink" title="函数重载注意事项"></a>函数重载注意事项</h3><p>​                ● 引用作为重载条件（常量引用作为参数重载）</p><p>​                ● 函数重载碰到函数默认参数（调用会找到多个入口，引发歧义）</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//函数重载注意事项</span><br><span class="hljs-comment">//1、引用作为重载条件</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; endl;<br>&#125;<br><br><br><span class="hljs-comment">//2、函数重载碰到函数默认参数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func2</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">func</span>(a); <span class="hljs-comment">//调用无const</span><br><span class="hljs-built_in">func</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//调用有const</span><br><br><br><span class="hljs-comment">//func2(10); //碰到默认参数产生歧义，需要避免</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a><strong>类和对象</strong></h1><p>C++面向对象的三大特性为：<mark>封装、继承、多态</mark></p><p>C++认为<mark>万事万物都皆为对象</mark>，对象上有其属性和行为</p><p><strong>例如：</strong></p><p>​人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、放空调…</p><p>​具有相同性质的<mark>对象</mark>，我们可以抽象称为<mark>类</mark>，人属于人类，车属于车类</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h2><h3 id="封装的意义"><a href="#封装的意义" class="headerlink" title="封装的意义"></a>封装的意义</h3><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><p>​                ● 将属性和行为作为一个整体，表现生活中的事物</p><p>​                ● 将属性和行为加以<mark>权限</mark>控制</p><p><strong>封装意义一：</strong></p><p>​在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> class 类名{   访问权限： 属性  &#x2F; 行为  };</p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//圆周率</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-number">3.14</span>;<br><br><span class="hljs-comment">//1、封装的意义</span><br><span class="hljs-comment">//将属性和行为作为一个整体，用来表现生活中的事物</span><br><br><span class="hljs-comment">//封装一个圆类，求圆的周长</span><br><span class="hljs-comment">//class代表设计一个类，后面跟着的是类名</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span><br>&#123;<br><span class="hljs-keyword">public</span>:  <span class="hljs-comment">//访问权限  公共的权限</span><br><br><span class="hljs-comment">//属性</span><br><span class="hljs-type">int</span> m_r;<span class="hljs-comment">//半径</span><br><br><span class="hljs-comment">//行为</span><br><span class="hljs-comment">//获取到圆的周长</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calculateZC</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//2 * pi  * r</span><br><span class="hljs-comment">//获取圆的周长</span><br><span class="hljs-keyword">return</span>  <span class="hljs-number">2</span> * PI * m_r;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//通过圆类，创建圆的对象</span><br><span class="hljs-comment">// c1就是一个具体的圆</span><br>Circle c1;<br>c1.m_r = <span class="hljs-number">10</span>; <span class="hljs-comment">//给圆对象的半径 进行赋值操作</span><br><br><span class="hljs-comment">//2 * pi * 10 = = 62.8</span><br>cout &lt;&lt; <span class="hljs-string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.<span class="hljs-built_in">calculateZC</span>() &lt;&lt; endl;<br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//学生类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string name)</span> </span>&#123;<br>m_name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setID</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> </span>&#123;<br>m_id = id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showStudent</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;name:&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="hljs-string">&quot; ID:&quot;</span> &lt;&lt; m_id &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">public</span>:<br>string m_name;<br><span class="hljs-type">int</span> m_id;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Student stu;<br>stu.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;德玛西亚&quot;</span>);<br>stu.<span class="hljs-built_in">setID</span>(<span class="hljs-number">250</span>);<br>stu.<span class="hljs-built_in">showStudent</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><p>​            1.     public        公共权限  类内可以访问  类外可以访问</p><p>​            2.     protected 保护权限  类内可以访问  类外不可以访问</p><p>​            3.     private      私有权限  类内可以访问  类外不可以访问</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//三种权限</span><br><span class="hljs-comment">//公共权限  public     类内可以访问  类外可以访问</span><br><span class="hljs-comment">//保护权限  protected  类内可以访问  类外不可以访问</span><br><span class="hljs-comment">//私有权限  private    类内可以访问  类外不可以访问</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-comment">//姓名  公共权限</span><br><span class="hljs-keyword">public</span>:<br>string m_Name;<br><br><span class="hljs-comment">//汽车  保护权限</span><br><span class="hljs-keyword">protected</span>:<br>string m_Car;<br><br><span class="hljs-comment">//银行卡密码  私有权限</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> m_Password;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>m_Name = <span class="hljs-string">&quot;张三&quot;</span>;<br>m_Car = <span class="hljs-string">&quot;拖拉机&quot;</span>;<br>m_Password = <span class="hljs-number">123456</span>;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>Person p;<br>p.m_Name = <span class="hljs-string">&quot;李四&quot;</span>;<br><span class="hljs-comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span><br><span class="hljs-comment">//p.m_Password = 123; //私有权限类外访问不到</span><br><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图论之dfs浅谈</title>
    <link href="/2024/09/22/%E5%9B%BE%E8%AE%BA%E4%B9%8Bdfs%E6%B5%85%E8%B0%88/"/>
    <url>/2024/09/22/%E5%9B%BE%E8%AE%BA%E4%B9%8Bdfs%E6%B5%85%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是dfs？"><a href="#什么是dfs？" class="headerlink" title="什么是dfs？"></a>什么是dfs？</h1><p>dfs depth first search 深度优先搜索</p><p>字面意思理解 就是按照深度的方式进行搜索，有多深就先挖多深</p><p>简单讲就是按着一条线走到头。然后再回退走另一条线</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStation67a423b9ea1ed.gif"></p><h1 id="show-code"><a href="#show-code" class="headerlink" title="show code"></a>show code</h1><ul><li>非递归版DFS（理解）</li></ul><blockquote><p>通过这种方式进行深入浅出，快速理解DFS在做什么</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-comment">//还没写完</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>递归版DFS（必须掌握）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//使用邻接矩阵</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e2</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> g[N][N];<br><span class="hljs-comment">//利用数组标记</span><br><span class="hljs-type">bool</span> vis[N]<br><span class="hljs-type">int</span> m, n;<span class="hljs-comment">//m边数 n顶点数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<br>cout &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">//输出</span><br>    vis[p] = <span class="hljs-number">1</span>;<span class="hljs-comment">//搜索即标记</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[i]&amp;&amp;g[p][i]==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//找该点所有 未被标记 的 邻接点（二者要同时满足）</span><br>            <span class="hljs-built_in">dfs</span>(i);<span class="hljs-comment">//递归调用</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> s;<span class="hljs-comment">//起点</span><br>    cin &gt;&gt; m &gt;&gt; n &gt;&gt; s;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        g[u][v] = g[v][u] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(s); <span class="hljs-comment">//从起点开始调用dfs</span><br>&#125;<br></code></pre></td></tr></table></figure><p>······未完待续</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程基础06</title>
    <link href="/2024/09/21/06/"/>
    <url>/2024/09/21/06/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举解题方法"><a href="#枚举解题方法" class="headerlink" title="枚举解题方法"></a>枚举解题方法</h1><ol><li>确定枚举<mark>范围</mark>（优化）</li><li>通过特定条件筛选目标答案</li></ol><h1 id="几个C库函数"><a href="#几个C库函数" class="headerlink" title="几个C库函数"></a>几个C库函数</h1><p><a href="https://www.runoob.com/cprogramming/c-standard-library-math-h.html">C 标准库 –  | 菜鸟教程 </a></p><p>以下函数需要加头文件math.h 在C++写cmath</p><ul><li>sqrt()开根号  </li><li>pow()幂函数  </li><li>abs()绝对值  </li><li>ceil()向上取整  </li><li>floor()向下取整</li><li>fmod()小数取余</li></ul><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><h2 id="623-斐波那契数列"><a href="#623-斐波那契数列" class="headerlink" title="623 斐波那契数列"></a>623 斐波那契数列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">1</span>, c = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++)<br>&#123;<br>c = a + b;<br>a = b;<br>b = c;<br>&#125;<br>cout &lt;&lt; c &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1423-统计满足条件的4位数"><a href="#1423-统计满足条件的4位数" class="headerlink" title="1423 统计满足条件的4位数"></a>1423 统计满足条件的4位数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 模块化编程</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = x / <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> b = x / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> c = x / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> d = x % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (d - c - b - a &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> x, cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(x)) cnt++;<br>&#125;<br><br>cout &lt;&lt; cnt &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1428-求小数的某一位"><a href="#1428-求小数的某一位" class="headerlink" title="1428 求小数的某一位"></a>1428 求小数的某一位</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a, b, n;<br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>a %= b; <span class="hljs-comment">// double不能直接使用%进行模运算，可以使用fmod进行模运算</span><br>a *= <span class="hljs-number">10</span>;<br>&#125;<br>cout &lt;&lt; a / b &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h1><h2 id="626-水仙花数"><a href="#626-水仙花数" class="headerlink" title="626 水仙花数"></a>626 水仙花数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 枚举法</span><br><span class="hljs-comment">// 1.确定枚举范围（优化）</span><br><span class="hljs-comment">// 2.通过特定条件筛选目标答案</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 1.确定枚举范围</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">100</span>; i &lt;= <span class="hljs-number">999</span>; i++)<br>&#123;<br><span class="hljs-type">int</span> a = i / <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> b = i / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> c = i % <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// 2.通过特定条件筛选目标答案</span><br><span class="hljs-keyword">if</span> (a * a * a + b * b * b + c * c * c == i)<br>&#123;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LG2001-小学数学N合一"><a href="#LG2001-小学数学N合一" class="headerlink" title="LG2001 小学数学N合一"></a>LG2001 小学数学N合一</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-comment">//sqrt()开根号  pow()幂函数  abs()绝对值  ceil()向上取整  floor()向下取整</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">if</span> (T == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 粘贴问题 1 的主函数代码，除了 return 0</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I love Pointer!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// 粘贴问题 2 的主函数代码，除了 return 0</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 3 的代码</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n%d&quot;</span>, <span class="hljs-number">14</span> / <span class="hljs-number">4</span>, <span class="hljs-number">14</span> / <span class="hljs-number">4</span> * <span class="hljs-number">4</span>, <span class="hljs-number">14</span> % <span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">4</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 4 的代码</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf&quot;</span>, <span class="hljs-number">500.0</span> / <span class="hljs-number">3</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 5 的代码</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (<span class="hljs-number">260</span> + <span class="hljs-number">220</span>) / (<span class="hljs-number">12</span> + <span class="hljs-number">20</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">6</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 6 的代码</span><br>        <span class="hljs-type">double</span> l = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">6</span> * <span class="hljs-number">6</span> + <span class="hljs-number">9</span> * <span class="hljs-number">9</span>);<span class="hljs-comment">//开根号</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4lf&quot;</span>, l);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">7</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 7 的代码</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%d\n%d&quot;</span>, <span class="hljs-number">110</span>, <span class="hljs-number">90</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 8 的代码</span><br>        <span class="hljs-type">double</span> r = <span class="hljs-number">5</span>, pi = <span class="hljs-number">3.141593</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4lf\n%.4lf\n%.3lf&quot;</span>, <span class="hljs-number">2</span> * pi * r, pi * r * r, <span class="hljs-number">4.0</span> / <span class="hljs-number">3</span> * pi * r * r * r);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">9</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 9 的代码</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (((<span class="hljs-number">1</span> + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 10 的代码</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">9</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">11</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 11 的代码</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4lf&quot;</span>, <span class="hljs-number">100.0</span> / (<span class="hljs-number">8</span> - <span class="hljs-number">5</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">12</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 12 的代码</span><br>        <span class="hljs-comment">//ASCII</span><br>        <span class="hljs-comment">//&#x27;A&#x27; - 65   &#x27;B&#x27; - 66  ...  &#x27;Z&#x27; - 90</span><br>        <span class="hljs-comment">//&#x27;a&#x27; - 97   &#x27;b&#x27; - 98  ...  &#x27;z&#x27; - 122</span><br>        <span class="hljs-comment">//&#x27;0&#x27; - 48   &#x27;1&#x27; - 49  ...  &#x27;9&#x27; - 57</span><br>        <span class="hljs-comment">//int-%d  double-%lf  char-%c</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n%c&quot;</span>, <span class="hljs-string">&#x27;M&#x27;</span> - <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;A&#x27;</span> + <span class="hljs-number">18</span> - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">13</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 13 的代码</span><br>        <span class="hljs-type">double</span> r1 = <span class="hljs-number">4</span>, r2 = <span class="hljs-number">10</span>, pi = <span class="hljs-number">3.141593</span>;<br>        <span class="hljs-type">double</span> v1 = <span class="hljs-number">4.0</span> / <span class="hljs-number">3</span> * pi * r1 * r1 * r1, v2 = <span class="hljs-number">4.0</span> / <span class="hljs-number">3</span> * pi * r2 * r2 * r2;<br>        <span class="hljs-type">double</span> v = v1 + v2;<br>        <span class="hljs-type">double</span> l = <span class="hljs-built_in">pow</span>(v, <span class="hljs-number">1.0</span> / <span class="hljs-number">3</span>);<span class="hljs-comment">//pow(a,b)求a的b次方</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (<span class="hljs-type">int</span>)l);<span class="hljs-comment">//强制类型转换</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (T == <span class="hljs-number">14</span>) &#123;<br>        <span class="hljs-comment">// 请自行完成问题 14 的代码</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, <span class="hljs-number">50</span>);<br>    &#125;<br>    <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="输入某年某月某日，判断这一天是这一年的第几天？"><a href="#输入某年某月某日，判断这一天是这一年的第几天？" class="headerlink" title="输入某年某月某日，判断这一天是这一年的第几天？"></a>输入某年某月某日，判断这一天是这一年的第几天？</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> months[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">31</span>,<span class="hljs-number">28</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span> &#125;;<br><br><span class="hljs-comment">// 使用：month[i]（取第i个元素的值） month[0] month[1]...</span><br><span class="hljs-type">int</span> year, month, day;<br>cin &gt;&gt; year &gt;&gt; month &gt;&gt; day;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; month; i++)<br>&#123;<br>ans += months[i];<br>&#125;<br><span class="hljs-keyword">if</span> (month &gt; <span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span> ((year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br>&#123;<br>ans += <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br>ans += day;<br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++02</title>
    <link href="/2024/09/20/C++02/"/>
    <url>/2024/09/20/C++02/</url>
    
    <content type="html"><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><h2 id="引用的基本使用"><a href="#引用的基本使用" class="headerlink" title="引用的基本使用"></a>引用的基本使用</h2><p><strong>作用：</strong> 给变量起别名</p><p><strong>语法：</strong> 数据类型 &amp;别名 &#x3D; 原名</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> &amp;b = a;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br>b = <span class="hljs-number">100</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用注意事项"><a href="#引用注意事项" class="headerlink" title="引用注意事项"></a>引用注意事项</h2><p>● 引用必须初始化</p><p>● 引用在初始化后，不可以改变</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//int &amp;c; //错误，引用必须初始化</span><br><span class="hljs-type">int</span> &amp;c = a; <span class="hljs-comment">//一旦初始化后，就不可以更改</span><br>c = b; <span class="hljs-comment">//这是赋值操作，不是更改引用</span><br><br>cout &lt;&lt; <span class="hljs-string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用做函数参数"><a href="#引用做函数参数" class="headerlink" title="引用做函数参数"></a>引用做函数参数</h2><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参和实参代表的是同一块内存，不用像值传递一样拷贝一份，省空间</p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//1. 值传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap01</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-comment">//2. 地址传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap02</span><span class="hljs-params">(<span class="hljs-type">int</span>* a, <span class="hljs-type">int</span>* b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = *a;<br>*a = *b;<br>*b = temp;<br>&#125;<br><br><span class="hljs-comment">//3. 引用传递</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Swap03</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a, <span class="hljs-type">int</span>&amp; b)</span> </span>&#123;<br><span class="hljs-type">int</span> temp = a;<br>a = b;<br>b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br><br><span class="hljs-built_in">mySwap01</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">mySwap02</span>(&amp;a, &amp;b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br><span class="hljs-built_in">mySwap03</span>(a, b);<br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p></blockquote><h2 id="引用做函数返回值"><a href="#引用做函数返回值" class="headerlink" title="引用做函数返回值"></a>引用做函数返回值</h2><p>作用：引用是可以作为函数的返回值存在的</p><p>注意：<strong>不要返回局部变量引用</strong>（函数使用栈区开辟空间，使用后就会消失，即使拿到地址进行修改也会发生问题）</p><p>用法：函数调用作为左值（即函数调用可以返回一个左值引用。这意味着你可以将函数调用的结果直接赋值给另一个变量，或者对它进行修改，因为函数返回的是一个可以被赋值的内存位置的引用。）</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//返回局部变量引用</span><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">//局部变量</span><br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-comment">//返回静态变量引用</span><br><span class="hljs-function"><span class="hljs-type">int</span>&amp; <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//不能返回局部变量的引用</span><br><span class="hljs-type">int</span>&amp; ref = <span class="hljs-built_in">test01</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;<br><br><span class="hljs-comment">/*有名字的变量是左值例如：a = 1 ,a为左值，例如： 2 ，2 是右值</span><br><span class="hljs-comment">左值引用只能接收左值，右值引用只能接收右值*/</span><br><span class="hljs-type">int</span> &amp;&amp;R = <span class="hljs-number">2</span>;<span class="hljs-comment">//右值引用接收右值</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> &amp;R1 = a; <span class="hljs-comment">//左值引用只能接收左值</span><br><br><span class="hljs-comment">//int &amp;&amp;R2 = a; //报错</span><br><span class="hljs-comment">//int &amp;R3 = 2; //报错</span><br><br><span class="hljs-comment">//万能引用：前面用const 修饰</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;R4 = <span class="hljs-number">2</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> &amp;&amp;R5 = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">//如果函数做左值，那么必须返回引用</span><br><span class="hljs-type">int</span>&amp; ref2 = <span class="hljs-built_in">test02</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br><br><span class="hljs-built_in">test02</span>() = <span class="hljs-number">1000</span>;<br><br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用的本质"><a href="#引用的本质" class="headerlink" title="引用的本质"></a>引用的本质</h2><p>本质：<strong>引用的本质在c++内部实现是一个指针常量</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 1. const int * test; 指针变量test指向的值不能被修改</span><br><span class="hljs-comment">//void func04(const int* test)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//*test = 20;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">// 2. int * const test; 指针变量test不能被修改</span><br><span class="hljs-comment">//void func05( int* const test)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//int b = 20;</span><br><span class="hljs-comment">//test = &amp;b;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">// 3. const int * const test; 指针变量test指向的值不能被修改和test不能被修改</span><br><span class="hljs-comment">//void func06(const int* const test)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//int b = 20;</span><br><span class="hljs-comment">//test = &amp;b;</span><br><span class="hljs-comment">//*test = 20;</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><p>讲解示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//发现是引用，转换为 int* const ref = &amp;a;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; ref)</span></span>&#123;<br>ref = <span class="hljs-number">100</span>; <span class="hljs-comment">// ref是引用，转换为*ref = 100</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>    <br>    <span class="hljs-comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span><br><span class="hljs-type">int</span>&amp; ref = a; <br>ref = <span class="hljs-number">20</span>; <span class="hljs-comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span><br>    <br>cout &lt;&lt; <span class="hljs-string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; endl;<br>    <br><span class="hljs-built_in">func</span>(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p></blockquote><h2 id="常量引用"><a href="#常量引用" class="headerlink" title="常量引用"></a>常量引用</h2><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p><p>在函数形参列表中，可以加const修饰形参，防止形参改变实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//引用使用的场景，通常用来修饰形参</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showValue</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; v)</span> </span>&#123;<br><span class="hljs-comment">//v += 10;</span><br>cout &lt;&lt; v &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-comment">//函数中利用常量引用防止误操作修改实参</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">showValue</span>(a);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="经典面试题：指针和引用的区别？"><a href="#经典面试题：指针和引用的区别？" class="headerlink" title="经典面试题：指针和引用的区别？"></a><strong>经典面试题：指针和引用的区别？</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">1.</span>引用必须被初始化，指针可以选择不初始化<br><span class="hljs-number">2.</span>引用指向不能被修改，指针指向可以被修改<br><span class="hljs-number">3.</span>访问实体的方式不同，引用是编译器处理，指针需要自己解引用<br><span class="hljs-number">4.</span>引用不可以为空，指针可以为空<br><span class="hljs-number">5.</span>引用比指针更安全（指针野指针，空指针，悬挂指针）<br><span class="hljs-number">6.</span><span class="hljs-keyword">sizeof</span>引用得到的是所指向变量（对象）的大小，<span class="hljs-keyword">sizeof</span>指针得到的是指针的大小<br><span class="hljs-number">7.</span>引用作为函数参数传递时，传递的是实参本身，指针作为函数参数传递时，传递的是指针变量的值<br><span class="hljs-number">8.</span>引用比指针使用起来更简洁<br><span class="hljs-number">9.</span>引用不能有多级，指针有多级指针<br><br>注意：学会转换为自己的理解说出来，面试不要死记硬背<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程基础05</title>
    <link href="/2024/09/18/05/"/>
    <url>/2024/09/18/05/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h1><p><a href="https://blog.csdn.net/huangblog/article/details/8271791">C语言运算符优先级（超详细）</a></p><blockquote><p>sizeof(表达式)：不是函数 是长度<mark>运算符</mark></p></blockquote><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="封装函数的好处"><a href="#封装函数的好处" class="headerlink" title="封装函数的好处"></a>封装函数的好处</h2><ul><li>提高代码可维护性：修改代码功能或bug</li><li>代码复用、减少冗余代码：避免重复编写相同逻辑，一方面也能降低出错风险</li><li>便于测试：避免重复测试相同逻辑</li><li>提高代码可扩展性：与可维护性类似，便于扩展代码功能</li><li>隐藏实现细节，提高安全性（项目中更能体会到）</li></ul><h2 id="函数的语法定义"><a href="#函数的语法定义" class="headerlink" title="函数的语法定义"></a>函数的语法定义</h2><p>return_type function_name( parameter list )<br>{<br>   body of the function<br>}</p><p>返回值类型 函数名(参数列表 变量类型 变量名, 变量类型 变量名)<br>{<br>    函数体<br>    return 返回值;<br>}</p><blockquote><p>void 无返回值类型 也可以有return</p><p>return作用： 1.结束一个函数 2.返回一个值</p></blockquote><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p><code>return_type function_name( parameter list );</code></p><p>有三种调用类型：值传递 址传递 引用调用</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>以交换两个数为例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// return作用： 1.结束一个函数 2.返回一个值</span><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myswap1</span><span class="hljs-params">(<span class="hljs-type">int</span>* pa, <span class="hljs-type">int</span>* pb)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> temp;<br>temp = *pa;<br>*pa = *pb;<br>*pb = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myswap2</span><span class="hljs-params">(<span class="hljs-type">int</span>** ppa, <span class="hljs-type">int</span>** ppb)</span> <span class="hljs-comment">// 形参</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span>* temp;<br>temp = *ppa;<br>*ppa = *ppb;<br>*ppb = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 交换两个数</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br><span class="hljs-type">int</span>* pa = &amp;a, * pb = &amp;b;<br>cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; pa &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; pb &lt;&lt; endl;<br><span class="hljs-built_in">myswap1</span>(&amp;a, &amp;b);<br><span class="hljs-built_in">myswap2</span>(&amp;pa, &amp;pb); <span class="hljs-comment">// 实参</span><br>cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>cout &lt;&lt; pa &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; pb &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p><strong>房子理论</strong></p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationHexoStation20250528131026.png"></p><p>定义易混淆：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span>* pa; <span class="hljs-comment">// int类型指针变量pa</span><br><span class="hljs-type">int</span> *pa; <span class="hljs-comment">// int类型指针变量pa  两者作用相同</span><br><span class="hljs-type">int</span> * pa, a, b; <span class="hljs-comment">// int类型变量a、int类型变量b、int类型指针变量pa</span><br></code></pre></td></tr></table></figure><p><strong>一句话学懂指针变量</strong></p><h1 id="指针变量中放的是谁的地址，-指针变量就是谁"><a href="#指针变量中放的是谁的地址，-指针变量就是谁" class="headerlink" title="指针变量中放的是谁的地址，*指针变量就是谁"></a><mark>指针变量中放的是谁的地址，*指针变量就是谁</mark></h1><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><h2 id="620-输出一个数的二进制有多少个1"><a href="#620-输出一个数的二进制有多少个1" class="headerlink" title="620 输出一个数的二进制有多少个1"></a>620 输出一个数的二进制有多少个1</h2><p>方法1：右移和1与</p><p>遍历二进制位</p><p>暴力求解，拿到这个数的二进制中的每一位，通过移位运算，让最低位按位与1。</p><p>运算规则：只有两个数的二进制同时为1，结果才为1，否则为0。（负数按补码形式参加按位与运算）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> n;<br>  cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (((n &gt;&gt; i) &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) cnt++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, cnt);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法2：巧妙按位与</p><p><code>n = n&amp;(n-1);</code> 这个表达式会让n的二进制中最右边的1就消失了。大大提高了代码效率，有多少个1，循环就进行多少次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// n = n &amp; (n - 1)</span><br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (n)<br>&#123;<br>n = n &amp; (n - <span class="hljs-number">1</span>);<br>cnt++;<br>&#125;<br>cout &lt;&lt; cnt &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1409-最大跨度值"><a href="#1409-最大跨度值" class="headerlink" title="1409 最大跨度值"></a>1409 最大跨度值</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> x, _min = <span class="hljs-number">1000</span>, _max = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (_max &lt; x)<br>&#123;<br>_max = x;<br>&#125;<br><span class="hljs-keyword">if</span> (_min &gt; x)<br>&#123;<br>_min = x;<br>&#125;<br>&#125;<br>cout &lt;&lt; _max - _min &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1432-最大公约数"><a href="#1432-最大公约数" class="headerlink" title="1432 最大公约数"></a>1432 最大公约数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 最早：更相减损术（太慢了）</span><br><span class="hljs-comment">//辗转相除法（欧几里得算法）求最大公约数gcd</span><br><br><span class="hljs-comment">// a % b = c</span><br><span class="hljs-comment">// 4 % 6 = 4 a = b b = c</span><br><span class="hljs-comment">// 6 % 4 = 2</span><br><span class="hljs-comment">// 4 % 2 = 0</span><br><span class="hljs-comment">// 2   0 b为0，此时a为最大公约数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<span class="hljs-comment">//函数的封装</span><br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (b!=<span class="hljs-number">0</span>) &#123;<br>c = a % b;<br>a = b, b = c;<br>&#125;<br><span class="hljs-keyword">return</span>a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a, b;   cin &gt;&gt; a &gt;&gt; b;<br><span class="hljs-type">int</span> ans = <span class="hljs-built_in">gcd</span>(a, b);<span class="hljs-comment">//函数的调用</span><br>cout &lt;&lt; ans &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1407求整数的和与均值"><a href="#1407求整数的和与均值" class="headerlink" title="1407求整数的和与均值"></a><strong>1407求整数的和与均值</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>,  x;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);<br> sum += x;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %.5lf&quot;</span>, sum, sum * <span class="hljs-number">1.0</span> / n);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1429计算星期几"><a href="#1429计算星期几" class="headerlink" title="1429计算星期几"></a>1429计算星期几</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a, b, m = <span class="hljs-number">7</span>;<br>cin &gt;&gt; a &gt;&gt; b;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; i++) &#123;<br>ans *= a % m;<br>ans %= m;<br>&#125;<br><span class="hljs-comment">//ans ==&gt; a^b%7</span><br><br><span class="hljs-keyword">if</span> (ans == <span class="hljs-number">0</span>) cout &lt;&lt; <span class="hljs-string">&quot;Sunday&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">1</span>) cout &lt;&lt; <span class="hljs-string">&quot;Monday&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">2</span>) cout &lt;&lt; <span class="hljs-string">&quot;Tuesday&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">3</span>) cout &lt;&lt; <span class="hljs-string">&quot;Wednesday&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">4</span>) cout &lt;&lt; <span class="hljs-string">&quot;Thursday&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">5</span>) cout &lt;&lt; <span class="hljs-string">&quot;Friday&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;Saturday&quot;</span> &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++01</title>
    <link href="/2024/09/14/C++01/"/>
    <url>/2024/09/14/C++01/</url>
    
    <content type="html"><![CDATA[<h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><p>输入输出流是指由若干字节组成的字节序列，这些字节中的数据按照顺序从一个对象传送到另一个对象。流表示了信息从源到目的端的流动。例如在输出时字节从内存流向输出设备，输入时字节从输入设备流向内存。</p><ul><li>输入输出头文件：#include <iostream></li><li>c语言头文件名字风格是 &lt;XXX.h&gt;，c++中头文件风格是不带最后的.h</li><li>cin 从控制台读入内容到变量。</li><li>cout 从变量输出内容到控制台。</li><li>std标准命名空间：C++标准库中的函数或者对象都是在命名空间std中定义</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>        cin &gt;&gt; a;<br>        <span class="hljs-comment">//输出变量</span><br>        cout &lt;&lt; a; <span class="hljs-comment">//不换行的输出</span><br><br>        cout &lt;&lt; a &lt;&lt; endl; <span class="hljs-comment">// 换行输出</span><br><br>        <span class="hljs-comment">//输出字符串</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;指针2010&quot;</span> &lt;&lt;<span class="hljs-string">&quot;   &quot;</span>&lt;&lt;<span class="hljs-string">&quot;指针2010&quot;</span>&lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h1><p>bool类型是c++中的基本数据类型，一种整型类型。</p><ul><li>单独占一个字节，取值false(0)或true(1)。</li><li>任何非0值转换为true,0转换为false。</li><li>c语言中没有bool类型。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-type">bool</span> a1 = <span class="hljs-number">-1</span> ;    <span class="hljs-comment">//将被转换为true，非零正负值都转换为true。</span><br>        <span class="hljs-type">bool</span> a2 = <span class="hljs-number">0</span>;      <span class="hljs-comment">//将被转换为false</span><br>        <span class="hljs-type">int</span> b1 = <span class="hljs-literal">true</span>;    <span class="hljs-comment">//将被转换为1</span><br>        <span class="hljs-type">int</span> b2 = <span class="hljs-literal">false</span>;   <span class="hljs-comment">//将被转换为0</span><br>        <br>   cout &lt;&lt; a1 &lt;&lt; endl;<br>        cout &lt;&lt; a2 &lt;&lt; endl;<br>        cout &lt;&lt; b1 &lt;&lt; endl;<br>        cout &lt;&lt; b2 &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="命名空间（namespace）"><a href="#命名空间（namespace）" class="headerlink" title="命名空间（namespace）"></a>命名空间（namespace）</h1><p>::限制符</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">// C语言头文件风格：&lt;xxx.h&gt;</span><br><span class="hljs-comment">// C++头文件风格：&lt;xxx&gt;</span><br><br><span class="hljs-comment">// #include&lt;math.h&gt; C</span><br><span class="hljs-comment">// #include&lt;cmath&gt; C++</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// 1.后续可以省略std::</span><br><span class="hljs-comment">// 2.只在当前作用域有效</span><br><br><span class="hljs-comment">// std标准命名空间：C++标准库中的函数或对象都在命名空间std中定义</span><br><br><span class="hljs-comment">// 创建命名空间</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">namespace 命名空间名称&#123;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">namespace</span> name1 &#123;<br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> name2 &#123;<br>    <span class="hljs-type">int</span> a;<br>&#125;<br><br><span class="hljs-comment">// 命名空间嵌套定义</span><br><span class="hljs-keyword">namespace</span> name3 &#123;<br>    <span class="hljs-type">int</span> n3;<br>    <span class="hljs-keyword">namespace</span> name4 &#123;<br>        <span class="hljs-type">int</span> n4;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 访问</span><br>    <span class="hljs-comment">// 命名空间变量::变量名;</span><br>    name1::a = <span class="hljs-number">100</span>;<br>    name1::<span class="hljs-built_in">print</span>();<br>    <br>    <span class="hljs-comment">// 作用</span><br>    <span class="hljs-comment">// 1.增加标识符的使用率</span><br>    <span class="hljs-comment">// 2.多人协作开发避免重定义问题</span><br>    <br>    <span class="hljs-comment">// 作用域解析运算符：：</span><br>    <span class="hljs-comment">// 1.命名空间限定：::限定命名空间的名称（std::cin）</span><br>    <span class="hljs-comment">// 2.类名限定：类成员访问（后续深入讲解）</span><br>    <span class="hljs-comment">// 3.全局作用域：::表示全局作用域（::a，表示全局作用域下的变量a）</span><br>    <br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> name1;<br>    a = <span class="hljs-number">10</span>; <span class="hljs-comment">// 正常（name1::a）</span><br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> name2;<br>    <span class="hljs-comment">// a = 10; // 错误，二义性（name1::a或name2::a）</span><br>    <span class="hljs-comment">// 作用域不会覆盖</span><br>    <br>    <span class="hljs-comment">// 命名空间嵌套访问</span><br>    name3::n3 = <span class="hljs-number">100</span>;<br>    name3::name4::n4 = <span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> name3;<br>    n3 = <span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> name3::name4;<br>    n4 = <span class="hljs-number">400</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h1><p>​        C++中利用new操作符在堆区开辟数据</p><p>​        堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 delete</p><p>​        函数使用的是栈区，函数结束后自动释放</p><p>​        语法：new 数据类型</p><p>​        利用new创建的数据，会返回该数据对应的类型的指针</p><p>​        malloc 返回值为void</p><p><strong>示例1： 基本语法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span>* <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-type">int</span>* a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">return</span> a;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> *p = <span class="hljs-built_in">func</span>();<br>        cout &lt;&lt; *p &lt;&lt; endl;<br>        cout &lt;&lt; *p &lt;&lt; endl;<br>        <span class="hljs-comment">//利用delete释放堆区数据</span><br>        <span class="hljs-keyword">delete</span> p;<br>        <span class="hljs-comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例2：开辟数组</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//堆区开辟数组</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-type">int</span>* arr = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<br>                arr[i] = i + <span class="hljs-number">100</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<br>                cout &lt;&lt; arr[i] &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-comment">//释放数组 delete 后加 []</span><br>        <span class="hljs-keyword">delete</span>[] arr;<br><br>        <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>new和malloc：<a href="https://blog.csdn.net/qq_43530773/article/details/113895903">C++动态分配（new和malloc的用法及区别）_动态开辟对象指针数组为什么不能用malloc-CSDN博客</a></p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>定义易混淆：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Plain">int* pa; // int类型指针变量pa<br>int *pa; // int类型指针变量pa<br>int a, b, * pa; // int类型变量a、int类型变量b、int类型指针变量pa<br></code></pre></td></tr></table></figure><p><strong>一句话学懂指针变量</strong></p><h1 id="指针变量中放的是谁的地址，-指针变量就是谁"><a href="#指针变量中放的是谁的地址，-指针变量就是谁" class="headerlink" title="指针变量中放的是谁的地址，*指针变量就是谁"></a><strong><mark>指针变量中放的是谁的地址，*指针变量就是谁</mark></strong></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span>* pa = &amp;a;<br>        <span class="hljs-type">int</span>* pb = pa;<br>        *pb = b;<br>        b = <span class="hljs-number">6</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        pb = &amp;b;<br>        a = <span class="hljs-number">8</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        *pb = a;<br>        *pa = *pb;<br>        pa = pb;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>课后习题1：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//指针变量中放的是谁的地址，*指针变量就是谁</span><br>        <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span>* pa = &amp;a;<br>        <span class="hljs-type">int</span>* pb = &amp;b;<br>        *pb = a;<br>        a = <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        *pb = *pa;<br>        pb = pa;<br>        a = <span class="hljs-number">8</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        pb = &amp;a;<br>        *pa = a;<br>        pa = &amp;b;<br>        *pb = b;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>课后习题2：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//指针变量中放的是谁的地址，*指针变量就是谁</span><br>        <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span>* pa = &amp;a;<br>        <span class="hljs-type">int</span>* pb = &amp;b;<br>        *pb = a;<br>        *pa = b;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        *pb = *pa;<br>        a = <span class="hljs-number">8</span>;<br>        pb = pa;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        pb = &amp;a;<br>        pa = &amp;b;<br>        a = <span class="hljs-number">5</span>;<br>        *pb = a;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二级指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> b = <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> *pa = &amp;a;<br>        <span class="hljs-type">int</span> *pb = &amp;b;<br>        <span class="hljs-type">int</span>** ppa = &amp;pa;<br>        ppa = &amp;pb;<br>        pb = pa;<br>        *ppa = pb;<br>        **ppa = <span class="hljs-number">30</span>;<br>        a = <span class="hljs-number">50</span>;<br>        b = <span class="hljs-number">60</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pa);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *pb);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, **ppa);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程基础04</title>
    <link href="/2024/09/13/04/"/>
    <url>/2024/09/13/04/</url>
    
    <content type="html"><![CDATA[<h1 id="常用模运算性质"><a href="#常用模运算性质" class="headerlink" title="常用模运算性质"></a>常用模运算性质</h1><p>初等数论：模运算的性质</p><ol><li>加法模运算的性质：(a + b) % m &#x3D; (a % m + b % m) % m</li><li>减法模运算的性质 ：(a - b) % m &#x3D; (a % m - b % m) % m </li><li>乘法模运算的性质：(a * a) % m &#x3D; (a % m * a % m) % m</li></ol><p>在大数操作例如幂运算过程中使用取模运算</p><h1 id="原码-反码-补码"><a href="#原码-反码-补码" class="headerlink" title="原码 反码 补码"></a>原码 反码 补码</h1><p><mark>正数</mark></p><p>原码&#x3D;反码&#x3D;补码</p><p><mark>负数</mark><br>原码： 1000 … 0101<br>反码： 1111 … 1010 原码<strong>除了符号位</strong>全部按位取反<br>补码： 1111 … 1011 反码+1</p><p>计算机都自动转化成补码进行运算</p><p>为什么要用补码运算？ 例如：</p><p>1 + -1 &#x3D; 0<br>0000 0001  1<br>1000 0001  -1<br>1000 0010  -2<br>&#x2F;&#x2F;反码：解决了1 + -1 &#x3D; -2 的问题，但是存在+0 -0<br>&#x2F;&#x2F;补码：解决了+0 -0 的问题</p><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p><mark>按位与&amp;</mark>   <mark>按位或|</mark>   <mark>按位异或^</mark>   <mark>按位取反~</mark>   <mark>右移&gt;&gt;</mark>   <mark>左移&lt;&lt;</mark></p><p><strong>按位与&amp;</strong></p><p>&amp;a 取地址符 单目运算符(这种取地址通常只取首地址)</p><p>&amp;&amp; 逻辑与</p><p>a&amp;b 按位与 双目运算符</p><p>例：a &#x3D; 60，b &#x3D; 13<br>    0011 1100</p><p>​    &amp; 0000 1101</p><p>​        0000 1100</p><p><strong>按位或|</strong></p><p>​        0011 1100</p><p>​     | 0000 1101</p><p>​        0011 1101</p><p><strong>按位异或^</strong> </p><p>​0011 1100</p><p>​     ^ 0000 1101 </p><p>​0011 0001</p><p><strong>按位取反~</strong></p><p>​     ~ 0011 1100</p><p>​1100 0011</p><p><strong>右移&gt;&gt;</strong></p><p>a &#x3D; 60     a &gt;&gt; 2 整体向右移动，<mark>左边补符号位</mark><br>    0011 1100<br>        00  111100</p><p>—&gt;符号位是0，左边补零，右边舍掉      </p><p>​     0000 1111</p><p><strong>左移&lt;&lt;</strong></p><p>a &#x3D; 60     a &lt;&lt; 2 整体向左移动，右边补零</p><p>​0011 1100<br>   001111 00</p><p>左边舍去，右边补零</p><p>​1111 0000</p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><h2 id="1427分苹果"><a href="#1427分苹果" class="headerlink" title="1427分苹果"></a>1427分苹果</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt;= n)<br>&#123;<br>sum += i;<br>i++;<br>&#125;<br>cout &lt;&lt; sum &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1404求阶乘"><a href="#1404求阶乘" class="headerlink" title="1404求阶乘"></a>1404求阶乘</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, s = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        s *= i;<br>    &#125;<br>    cout &lt;&lt; s &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1403输出奇偶数之和"><a href="#1403输出奇偶数之和" class="headerlink" title="1403输出奇偶数之和"></a>1403输出奇偶数之和</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> odd = <span class="hljs-number">0</span>, even = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt;= n)<br>&#123;<br><span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br>even += i;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>odd += i;<br>&#125;<br>        i++;<br>&#125;<br>cout &lt;&lt; even &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; odd &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1420津津的储蓄计划"><a href="#1420津津的储蓄计划" class="headerlink" title="1420津津的储蓄计划"></a>1420津津的储蓄计划</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>; <span class="hljs-comment">// 上个月 / 剩余的钱</span><br><span class="hljs-type">int</span> cost;<br><span class="hljs-type">int</span> mom;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">12</span>; i++)<br>&#123;<br>cin &gt;&gt; cost;<br><span class="hljs-comment">// 计算开销</span><br>left = left + <span class="hljs-number">300</span> - cost;<br><span class="hljs-keyword">if</span> (left &lt; <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; -i &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// += -= ... a += 1  a = a + 1</span><br>mom += left / <span class="hljs-number">100</span> * <span class="hljs-number">100</span>;<br>left -= left / <span class="hljs-number">100</span> * <span class="hljs-number">100</span>;<br>&#125;<br>cout &lt;&lt; left + mom * <span class="hljs-number">1.2</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h1><h2 id="1416人口增长"><a href="#1416人口增长" class="headerlink" title="1416人口增长"></a><strong>1416人口增长</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> x, n;<br>cin &gt;&gt; x &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br>x *= <span class="hljs-number">1.001</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4lf&quot;</span>, x);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1324判断闰年"><a href="#1324判断闰年" class="headerlink" title="1324判断闰年"></a>1324判断闰年</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 1.四年一闰，百年不闰</span><br><span class="hljs-comment">// 2.四百年一闰</span><br><span class="hljs-type">int</span> year;<br>cin &gt;&gt; year;<br><span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Y&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="609求1000到2000内的闰年"><a href="#609求1000到2000内的闰年" class="headerlink" title="609求1000到2000内的闰年"></a>609求1000到2000内的闰年</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 1.四年一闰，百年不闰</span><br><span class="hljs-comment">// 2.四百年一闰</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> year = <span class="hljs-number">1000</span>; year &lt;= <span class="hljs-number">2000</span>; year += <span class="hljs-number">4</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; year &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1430幂的末尾"><a href="#1430幂的末尾" class="headerlink" title="1430幂的末尾"></a>1430幂的末尾</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a, b;<br>cin &gt;&gt; a &gt;&gt; b;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>, m = <span class="hljs-number">1000</span>;<span class="hljs-comment">//一定要定义一个ans,否则会多乘一个a</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= b; i++)<br>&#123;<br>ans *= a;<br>ans %= <span class="hljs-number">1000</span>;<br><br><span class="hljs-comment">// ans = ans * a % m;</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%03d&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程基础03</title>
    <link href="/2024/09/10/03/"/>
    <url>/2024/09/10/03/</url>
    
    <content type="html"><![CDATA[<h1 id="循环逻辑语句"><a href="#循环逻辑语句" class="headerlink" title="循环逻辑语句"></a>循环逻辑语句</h1><ul><li><p>while  </p><p>先判断再执行  判断次数比执行次数多一次</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i···循环条件)&#123;<br>    ···<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>for</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(设置变量;循环边界条件;i++)&#123;<br>    <span class="hljs-comment">//括号当中的语句可以灵活摘出放在循环体内，要注意放置位置的逻辑顺序</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>do···while</p><p>先执行再判断 执行次数与判断次数相等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">do</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">while</span>();<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// while 判断次数比执行次数多一次</span><br><span class="hljs-comment">// 1.循环变量的初始化</span><br><span class="hljs-comment">//int i = 1;</span><br><span class="hljs-comment">//while (i &lt;= 10) // 2.循环的判断条件</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="hljs-comment">//// 3.循环变量的变化</span><br><span class="hljs-comment">//i++;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-comment">// for循环</span><br><span class="hljs-comment">// 灵活用法 -&gt; 需要思考逻辑问题</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++)<br>&#123;<br>cout &lt;&lt; i &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">// do...while...判断次数与执行次数相等</span><br><span class="hljs-comment">// 猜数字</span><br><span class="hljs-type">int</span> pw = <span class="hljs-number">7</span>, ans;<br><span class="hljs-keyword">do</span><br>&#123;<br>cin &gt;&gt; ans;<br>&#125; <span class="hljs-keyword">while</span> (pw == ans);<br><br>    <span class="hljs-comment">// goto语句 了解即可</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><h2 id="1304收费"><a href="#1304收费" class="headerlink" title="1304收费"></a><strong>1304收费</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> w;<br><span class="hljs-type">double</span> ans;<br>cin &gt;&gt; w;<br><span class="hljs-keyword">if</span> (w &lt;= <span class="hljs-number">20</span>) ans = w * <span class="hljs-number">1.68</span>;<br><span class="hljs-keyword">else</span> ans = w * <span class="hljs-number">1.98</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1320分段函数"><a href="#1320分段函数" class="headerlink" title="1320分段函数"></a>1320分段函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * y=−x+2.5;0≤x&lt;5</span><br><span class="hljs-comment"> * y=2−1.5(x−3)(x−3);5≤x&lt;10</span><br><span class="hljs-comment"> * y=x/2−1.5;10≤x&lt;20</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-type">double</span> x, y;<br>cin &gt;&gt; x;<br><span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; <span class="hljs-number">5</span>)<br>&#123;<br>y = -x + <span class="hljs-number">2.5</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">5</span> &amp;&amp; x &lt; <span class="hljs-number">10</span>)<br>&#123;<br>y = <span class="hljs-number">2</span> - <span class="hljs-number">1.5</span> * (x - <span class="hljs-number">3</span>) * (x - <span class="hljs-number">3</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>y = x / <span class="hljs-number">2</span> - <span class="hljs-number">1.5</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf&quot;</span>, y);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h1><h2 id="LG1011上学迟到（优化版）"><a href="#LG1011上学迟到（优化版）" class="headerlink" title="LG1011上学迟到（优化版）"></a>LG1011上学迟到（优化版）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//#include&lt;cmath&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> s, v;<br>cin &gt;&gt; s &gt;&gt; v;<br><span class="hljs-type">int</span> hour, minute;<br><span class="hljs-comment">//delta方便整型的向上取整，整型性能更高</span><br><span class="hljs-type">int</span> delta = (s % v == <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<span class="hljs-comment">//三目运算符</span><br><span class="hljs-comment">//int timeAll = ceil(s / v) + 10;</span><br><span class="hljs-type">int</span> timeAll = s / v + <span class="hljs-number">10</span> + delta;<br><span class="hljs-type">int</span> m = <span class="hljs-number">480</span> -timeAll;<br><span class="hljs-comment">/*if (m&gt;=0) &#123;</span><br><span class="hljs-comment">hour = m / 60;</span><br><span class="hljs-comment">minute = m % 60;</span><br><span class="hljs-comment">printf(&quot;%02d:%02d&quot;, hour, minute );</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">else &#123;</span><br><span class="hljs-comment">m = 24 * 60 + m;</span><br><span class="hljs-comment">hour = m / 60;</span><br><span class="hljs-comment">minute = m % 60;</span><br><span class="hljs-comment">printf(&quot;%02d:%02d&quot;, hour, minute);</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">if</span> (m&lt;<span class="hljs-number">0</span>) &#123;<br>m = <span class="hljs-number">24</span> * <span class="hljs-number">60</span> + m;<br>&#125;<br>hour = m / <span class="hljs-number">60</span>;<br>minute = m % <span class="hljs-number">60</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02d:%02d&quot;</span>, hour, minute);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ol><li><p>全部化成最小单位minute进行计算 double型变量 使用ceil向上取整 if判断中有重复代码块</p></li><li><p>设置一个delta 运用三目运算符做整型的向上取整 性能更高 优化if语句</p></li></ol></blockquote><h2 id="1317买笔"><a href="#1317买笔" class="headerlink" title="1317买笔"></a>1317买笔</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 想买尽量多的笔：全部购买4元的</span><br><span class="hljs-comment">    * 不想有剩余钱：笔的数量不变，买更贵的笔</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> price_6 = <span class="hljs-number">0</span>, price_5 = <span class="hljs-number">0</span>, price_4 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> money;<br>cin &gt;&gt; money;<br>price_4 = money / <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> r = money % <span class="hljs-number">4</span>;<br><span class="hljs-keyword">if</span> (r == <span class="hljs-number">1</span>)<br>&#123;<br>price_4 -= <span class="hljs-number">1</span>;<br>price_5 += <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (r == <span class="hljs-number">2</span>)<br>&#123;<br>price_4 -= <span class="hljs-number">1</span>;<br>price_6 += <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(r == <span class="hljs-number">3</span>)<br>&#123;<br>price_4 -= <span class="hljs-number">2</span>;<br>price_5 += <span class="hljs-number">1</span>;<br>price_6 += <span class="hljs-number">1</span>;<br>&#125;<br><br>cout &lt;&lt; price_6 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; price_5 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; price_4 &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1316简单计算器"><a href="#1316简单计算器" class="headerlink" title="1316简单计算器"></a><strong>1316简单计算器</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a, b;<br><span class="hljs-type">char</span> c; <span class="hljs-comment">// &#x27;&#x27; 字符  &quot;&quot; 字符串</span><br>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br><span class="hljs-comment">//scanf(&quot;%d %d %c&quot;, &amp;a, &amp;b, &amp;c); // 34 56 空格读入问题</span><br><span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;+&#x27;</span>)<br>&#123;<br>cout &lt;&lt; a + b &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>)<br>&#123;<br>cout &lt;&lt; a - b &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;*&#x27;</span>)<br>&#123;<br>cout &lt;&lt; a * b &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;/&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Divided by zero!&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>cout &lt;&lt; a / b &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Invalid operator!&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程基础02</title>
    <link href="/2024/09/08/02/"/>
    <url>/2024/09/08/02/</url>
    
    <content type="html"><![CDATA[<h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><ul><li>const 修饰一个变量为常量，且常量不可被修改</li></ul><h1 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h1><p>&lt; &gt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D;</p><p>真：非0</p><p>假：0</p><p>if（2 &amp;&amp; 0）：判断为假，只有C&#x2F;C++中可以代入数字判断真假</p><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>&amp;&amp; </p><p>||</p><p>！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; <br><span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;<br>cout &lt;&lt; a++ &amp;&amp; b++;<span class="hljs-comment">//0&amp;1，走到&amp;时结束这一行，b++没有进行表达式运算</span><br>cout &lt;&lt; a;<br>cout &lt;&lt; b;<br><span class="hljs-comment">//结果为0 1 1</span><br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-params">...</span><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>()<br><span class="hljs-params">...</span><span class="hljs-params">...</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span><br><span class="hljs-keyword">else</span><br><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><br><span class="hljs-comment">//以上写法等同</span><br></code></pre></td></tr></table></figure><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><p>逻辑表达式？变量1：变量2</p><p>意义：如果逻辑表达式为1输出变量1；如果表达式为假输出变量2</p><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>^：异或</p><h1 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h1><h2 id="1007-字符三角形"><a href="#1007-字符三角形" class="headerlink" title="1007 字符三角形"></a>1007 字符三角形</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 字符类型 1个字节 8比特 ascii</span><br>        <span class="hljs-comment">//char a = &#x27;a&#x27;; // &quot;&quot;字符串 &#x27;&#x27;字符</span><br>    <span class="hljs-comment">//printf(&quot;%d&quot;, a);</span><br>        <span class="hljs-comment">//int a1 = 97; ASCII码</span><br>        <span class="hljs-comment">//printf(&quot;%c&quot;, a1);</span><br>    <br>    <span class="hljs-comment">// C</span><br>        <span class="hljs-type">char</span> a;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;  %c\n&quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %c%c%c\n&quot;</span>, a, a, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%c%c%c%c\n&quot;</span>, a, a, a, a, a);<br> <br>     <span class="hljs-comment">// C++</span><br>        cin &gt;&gt; a;<br>        cout &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a &lt;&lt; a &lt;&lt; a &lt;&lt; endl;<br>        cout &lt;&lt; a &lt;&lt; a &lt;&lt; a &lt;&lt; a &lt;&lt; a &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="课堂练习"><a href="#课堂练习" class="headerlink" title="课堂练习"></a>课堂练习</h1><h2 id="1007牛吃牧草"><a href="#1007牛吃牧草" class="headerlink" title="1007牛吃牧草"></a>1007牛吃牧草</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">           假设1头牛 1天 吃1颗草</span><br><span class="hljs-comment">           问题可转换成 1天新生多少颗草</span><br><span class="hljs-comment">         15头牛 20天 共300颗草</span><br><span class="hljs-comment">           20头牛 10天 共200颗草</span><br><span class="hljs-comment">           即10天 新生100颗草</span><br><span class="hljs-comment">           即1天 新生10颗草</span><br><span class="hljs-comment">    */</span><br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, (<span class="hljs-number">15</span> * <span class="hljs-number">20</span> - <span class="hljs-number">10</span> * <span class="hljs-number">20</span>) / (<span class="hljs-number">20</span> - <span class="hljs-number">10</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LG1012-大象喝水"><a href="#LG1012-大象喝水" class="headerlink" title="LG1012 大象喝水"></a>LG1012 大象喝水</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-type">int</span> h, r;<br>        cin &gt;&gt; h &gt;&gt; r;<br>    <span class="hljs-comment">// const 修饰一个变量为常量，常量不可以被修改</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">double</span> pi = <span class="hljs-number">3.14</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-built_in">ceil</span>(<span class="hljs-number">20.0</span> * <span class="hljs-number">1000</span> / (pi * r * r * h));<br>        cout &lt;&lt; ans;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="LG2007肥胖问题"><a href="#LG2007肥胖问题" class="headerlink" title="LG2007肥胖问题"></a>LG2007肥胖问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-type">double</span> m, h;<br>        cin &gt;&gt; m &gt;&gt; h;<br>        <span class="hljs-type">double</span> bmi = m / (h * h);<br>        <span class="hljs-keyword">if</span> (bmi &lt; <span class="hljs-number">18.5</span>)<br>        &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Underweight&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bmi &gt;= <span class="hljs-number">18.5</span> &amp;&amp; bmi &lt; <span class="hljs-number">24</span>)<br>        &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;Normal&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.4lf\nOverweight&quot;</span>, bmi); <span class="hljs-comment">// \n 换行符</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h2 id="1008地球人口承载力估计"><a href="#1008地球人口承载力估计" class="headerlink" title="1008地球人口承载力估计"></a>1008地球人口承载力估计</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>  std;<br><br><span class="hljs-comment">// 牛吃牧草问题</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-type">int</span> x, a, y, b;<br>        cin &gt;&gt; x &gt;&gt; a &gt;&gt; y &gt;&gt; b;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>, (b * y - a * x) * <span class="hljs-number">1.0</span> / (b - a));<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程基础01</title>
    <link href="/2024/09/07/01/"/>
    <url>/2024/09/07/01/</url>
    
    <content type="html"><![CDATA[<h1 id="C基础程序框架"><a href="#C基础程序框架" class="headerlink" title="C基础程序框架"></a><strong>C基础程序框架</strong></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">//头文件，相当于java的import</span><br><span class="hljs-comment">//&quot;#&quot;代表预处理命令</span><br><span class="hljs-comment">//std：标准   i-input 输入   o-output 输出</span><br><span class="hljs-comment">/*1.&quot;&quot;：先从当前目录（项目目录下）寻找，再从系统配置的环境路径下寻找</span><br><span class="hljs-comment">2.&lt;&gt;：从系统配置的环境路径下寻找</span><br><span class="hljs-comment">二者区别比较：编译速度慢，运行速度相同</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 有且仅有一个主函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> a;    <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<span class="hljs-comment">//&amp;：取址符（在输入时无论什么格式都要使用）</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a);<br>    <span class="hljs-comment">// printf() 输出[print打印输出  format格式]   scanf() 输入</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-基础程序框架"><a href="#C-基础程序框架" class="headerlink" title="C++基础程序框架"></a>C++基础程序框架</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">// i-input 输入  o-output 输出  stream 流</span><br><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">// using 使用  namespace 命名空间  std 标准   整句意义- 使用标准命名空间</span><br><br><br><span class="hljs-comment">// 入口函数（主函数）有且仅有一个</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">// 括号内可以进行传参 1.传入参数的个数 2.传入的参数</span><br>    <span class="hljs-type">int</span> a;<br>    cin &gt;&gt;;<br>    cout &lt;&lt;;<br>    <span class="hljs-comment">// cin 输入   cout 输出</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//1.返回（结束）函数 2.返回值</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="注释理解"><a href="#注释理解" class="headerlink" title="注释理解"></a>注释理解</h1><ul><li><p><mark>单行注释</mark><code>// </code></p></li><li><p><mark>多行注释</mark></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs /*">/*<br>32132<br>654564<br>*/<br></code></pre></td></tr></table></figure><ul><li>编译器怎么理解注释？<mark>空格</mark></li><li>编译的时候怎么处理注释？<mark>在预处理阶段会将注释删除</mark></li></ul><h1 id="变量类型-变量名"><a href="#变量类型-变量名" class="headerlink" title="变量类型 变量名"></a>变量类型 变量名</h1><p><code>int a;</code></p><ul><li><p>int 整数类型（整型） </p><p>int <strong>4</strong>个字节 <strong>32</strong>比特    0000 0000 … 0000 0000<br>1个符号位（首位）    0表示正数  1表示负数  31个数值位（带符号）</p><p>范围： -2^31 ~ 2^31 - 1<br>例： &#x2F;&#x2F; 变量a、b存储整数<br>     &#x2F;&#x2F; &#x3D; 赋值运算符，等号右边赋值给等号左边<br> <code>int a = 10, b = 20;</code></p></li><li><p>float 单精度浮点数类型</p><p>精度<strong>6-7</strong>位 <strong>4</strong>个字节</p></li><li><p>double 双精度浮点数类型 </p><p>精度<strong>15-16</strong>位 <strong>8</strong>个字节<br>若遇浮点数，首选double</p></li></ul><h1 id="格式化占位符"><a href="#格式化占位符" class="headerlink" title="格式化占位符"></a>格式化占位符</h1><ul><li><p>int:%d    char:%c    float:%f    double:%lf </p></li><li><p><code>scanf(&quot;%d%d&quot;, &amp;a, &amp;b); // &amp;：取地址符号</code></p></li></ul><p>​       <code>printf(&quot;a = %d， b = %d&quot;, a, b); // 输出效果： a = 10, b = 20</code></p><ul><li><p>%n.m</p><ul><li>n：表示宽度（整数位数+小数点(.)+小数位数）</li></ul><p>限制宽度 &gt; 实际宽度：左边补空格，如果n前面加0，则左边补0；如果n前面加-，右边补空格<br>限制宽度 &lt; 实际宽度：限制失效</p><ul><li>m：小数点后几位数</li></ul></li></ul><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ol><li><p>构成：数字、字母、下划线</p></li><li><p>不能以数字开头     _1a(√)     1a(数字1开头 ×)</p></li><li><p>不能和关键字重名</p></li><li><p>区分大小写</p></li></ol><h1 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h1><p>驼峰命名法：首字母小写 后面的每个单词的首字母大写 </p><p>myWechatUserId</p><h1 id="强转"><a href="#强转" class="headerlink" title="强转"></a>强转</h1><ul><li>C语言<code>(double)a</code></li><li>C++<code>double(a)</code></li></ul><p>隐式类型转换</p><ul><li><p>简单类型向复杂类型转换</p></li><li><p>向长度更长的方向转换</p></li><li><p>向精度更高的方向转换</p><p>例：double b, c;<br>&#x2F;&#x2F; 以赋值运算符左边类型为准 ，最后类型依然是int</p><p>int a &#x3D; b + c;<br>&#x2F;&#x2F; 类型兼容</p></li></ul><h1 id="课堂练习：001-输出Hello-World"><a href="#课堂练习：001-输出Hello-World" class="headerlink" title="课堂练习：001 输出Hello, World!"></a>课堂练习：001 输出Hello, World!</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span>;</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="课堂练习：1003-电影票"><a href="#课堂练习：1003-电影票" class="headerlink" title="课堂练习：1003 电影票"></a><strong>课堂练习：1003 电影票</strong></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-type">int</span> x;<br>  cin &gt;&gt; x;<br>  cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; x * <span class="hljs-number">10</span> &lt;&lt; endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="课堂练习：1002-梯形面积"><a href="#课堂练习：1002-梯形面积" class="headerlink" title="课堂练习：1002 梯形面积"></a><strong>课堂练习：1002 梯形面积</strong></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">double</span> h = <span class="hljs-number">150</span> * <span class="hljs-number">2</span> / <span class="hljs-number">15</span>; <span class="hljs-comment">// 高</span><br><span class="hljs-type">double</span> up = <span class="hljs-number">15</span>, down = <span class="hljs-number">25</span>; <span class="hljs-comment">// 上底 下底</span><br><span class="hljs-comment">//int ans; // answer</span><br><span class="hljs-comment">//int res, ret; // result</span><br><span class="hljs-type">double</span> ans = (up + down) * h / <span class="hljs-number">2</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>引子</title>
    <link href="/2024/09/06/%E5%BC%95%E5%AD%90/"/>
    <url>/2024/09/06/%E5%BC%95%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h1 id="送给自己"><a href="#送给自己" class="headerlink" title="送给自己"></a>送给自己</h1><p><strong>从零再次开始是我的选择。</strong></p>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>base</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop编辑系统文件</title>
    <link href="/2024/04/20/Hadoop%E7%BC%96%E8%BE%91%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/"/>
    <url>/2024/04/20/Hadoop%E7%BC%96%E8%BE%91%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>在搭建Hadoop伪分布式环境时，有一个不查不知道的操作</p><p>是基于Linux操作系统上的</p><blockquote><p>当我们进行vi etc&#x2F;profile时会弹出一个环境变量的东东</p></blockquote><p>我们的目的是修改它，那么该如何操作呢？ ↓↓↓</p><ol><li>首先我们要知道几个内容</li></ol><ul><li><p>vi：是Linux系统内置的文本编辑器，通过这个指令可以编辑文件</p></li><li><p>etc&#x2F;profile：永久性的环境变量，是全局变量，&#x2F;etc&#x2F;profile.d&#x2F; 设置对所有用户生效（实际上还是比较类似于我们Java配环境变量的）</p></li></ul><p>那也就是说我们只是弹出来一个文件，跟正常Windows的操作一样，一样有编辑修改和保存关闭等等的功能</p><ol><li>vi这些操作必须通过指令完成，而不是鼠标简简单单就可以操作</li></ol><ul><li><p>i(insert)：直接在文件界面按i键就可以进行修改操作，页面下也可以看到“插入”二字</p></li><li><p>按下Esc(就是键盘左上角的键位)：这个就是类似于输入命令的前置操作，如果不按是无法输入命令的(输入模式是不可以直接切换到编辑模式的，<strong>需要先按下 Esc键回到命令模式</strong>，此时左下角的 – INSERT – 会消失)</p></li><li><p>:wq：表示保存并退出文件</p></li></ul><p>这样一系列操作后才能回到我们最初的页面，并且执行其他命令啦</p>]]></content>
    
    
    <categories>
      
      <category>错误日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双链表</title>
    <link href="/2024/04/20/%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/04/20/%E5%8F%8C%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>在单链表基础上增加向前的指针，使我们能够知道该结点的前后结点的信息</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>时间复杂度O(1)</p><p>直接把当前结点的prev指向前驱，next指向后继；再将前驱的next和后继的prev指向当前结点，插入操作结束！</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130228729.png"></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>时间复杂度O(1)</p><p>将指向当前结点的next指针指向当前结点的后继；</p><p><code>cur.next.prev = cur.prev;</code></p><p>将指向当前结点的prev指针指向当前结点的前驱；</p><p><code>cur.prev.next = cur.next;</code></p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130238621.png"></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表</title>
    <link href="/2024/04/20/%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/04/20/%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><blockquote><p>每个节点 &#x3D; 存储值 + 链接下一结点的引用字段</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SinglyListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    SinglyListNode next;<br>    SinglyListNode(<span class="hljs-type">int</span> x) &#123; <br>      val = x; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><blockquote><p>若从链表头一直到尾都进行一次遍历，则需要O(N)时间，效率太低，那么该如何提升速度呢？多加一个变量－－头结点是一个很好的办法(头结点一般不设置值)。</p></blockquote><h1 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h1><p>时间复杂度O(1)</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130047383.png"></p><p>要想插入一个新结点，我们只需要让新结点(cur)的指针先指向想插入地方的后者(next)，再让前者(prev)的指针指向新的结点(cur)，这样一个新的链接就形成了，是不是非常简单！</p><p>注意：一定要让新结点先与后方的结点连接上，试想看，如果先让prev直接指向cur会发生什么事情呢？直接进行连接的时候我们会发现，next直接会断掉，如果我们再想让cur连接上next是不是就于事无补了，这下好啦，根本就找不到next在哪里了(扶额苦笑)，如图</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130107633.png"></p><p>那假如我们有的时候就会忘记先连接后边怎么办呢，没关系！！！这有什么难的</p><p>我们直接先对这串链表进行一个存储的大动作，用另一个变量存起来，这样我想用就可以用咯，相当于拿了一个备份（虽然说浪费了一定的空间，但是不会再弄丢啦）</p><h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h1><p>时间复杂度O(N)</p><p>懂了插入操作之后，删除操作就更好理解了，操作链表的本质就是改变指针(引用)</p><p>我们假设想删除某一结点x，意思就是想要在链表中将x刨除，那么我们直接让指针越过该结点不就好了，让x的前指针(a)直接指向他的下一个结点(b)即可，删除操作就是这么简单！</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130122175.png"></p><h1 id="特殊位置的增删改查"><a href="#特殊位置的增删改查" class="headerlink" title="特殊位置的增删改查"></a>特殊位置的增删改查</h1><h2 id="在开头增加结点"><a href="#在开头增加结点" class="headerlink" title="在开头增加结点"></a>在开头增加结点</h2><p>我们知道，头结点是链表在增删改查提高效率的一大关键，那么如果我们想要在某个链表的开头更新节点，应该怎么办呢</p><p>直接三步走</p><ol><li><p>初始化一个新结点 cur ；</p></li><li><p>将新结点的后继指向头结点的后继；</p></li><li><p>将头结点后继指向新结点 。</p></li></ol><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130129221.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">headInsert</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>&#123;<br>  <span class="hljs-type">Node</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data);<br>  n.next = head.next;<br>  head.next = n;<br>  <span class="hljs-comment">//head.next = new Node(data,head.next);</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除第一个结点"><a href="#删除第一个结点" class="headerlink" title="删除第一个结点"></a>删除第一个结点</h2><p>在已有链表上删除第一个结点</p><p>这还不简单，直接让头结点指向第二个节点即可</p><p><img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130136850.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span>&#123;<br>  <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> head.next;<br>  head.next = first.next;<br>  <span class="hljs-comment">//head.next = head.next.next;</span><br> &#125;<br></code></pre></td></tr></table></figure><h2 id="在末尾插入结点"><a href="#在末尾插入结点" class="headerlink" title="在末尾插入结点"></a>在末尾插入结点</h2><p>这似乎比在开始的操作要复杂一些，但如果我们定义一个临时指针，让他做一个索引标记，指向实时位置，我们就知道现在遍历到何处了，这样就方便在尾巴进行插入操作啦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tailInsert</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span>&#123;<br>  <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>  <span class="hljs-comment">//遍历到结尾处</span><br>  <span class="hljs-keyword">while</span>(temp.next!=<span class="hljs-literal">null</span>)&#123;<br>    temp = temp.next;<br>    &#125;<br>  <span class="hljs-type">Node</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(data);<br>  cur = temp.next;<br>  <span class="hljs-comment">//temp.next = new Node(data,null)</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="删除末尾结点"><a href="#删除末尾结点" class="headerlink" title="删除末尾结点"></a>删除末尾结点</h2><p>同理基础操作是遍历,但遍历只能让temp定位到最后一个结点，如果需要删除最后一个节点只能找到倒数第二个节点，让他的后继为空才行，于是需要多加一个变量找到temp的前一个结点（链表长度为空直接返回）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span>(head.next==<span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span>(temp.next!=<span class="hljs-literal">null</span>)&#123;<br>        prev = temp;<br>        temp = temp.next;<br>    &#125;<br>    prev.next = <span class="hljs-literal">null</span>; <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>头插头删 → 栈 </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DataStructure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多人上传导致Git冲突问题解决</title>
    <link href="/2023/12/28/%E5%A4%9A%E4%BA%BA%E4%B8%8A%E4%BC%A0%E5%AF%BC%E8%87%B4Git%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2023/12/28/%E5%A4%9A%E4%BA%BA%E4%B8%8A%E4%BC%A0%E5%AF%BC%E8%87%B4Git%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>引子：在云效上我发现我的前端文件推不上去了，经过学习后发现是这个原因：<br>因为我们一开始没有建立每个人属于自己的分支，并且也要分好前后端两个分支</p></blockquote><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>一开始后端文件直接推送在了远程仓库的master主线上，后来我也在idea直接把前端文件推送到这个master主线，然后idea显示推送失败，我查到推送失败是由于某种冲突导致的，再次拉取文件推送文件依然无用，最后也没有用git命令解决好。</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol><li><p>首先我们需要知道分支是什么东西。分支就像树分出来的枝干一样，每一根都是独立的，所以我们如果建立了自己独立的分支是不会互相干扰的，当然，每次你做的修改，提交的版本别人也不能看到，但是这样可以做到代码的互不影响，不会因为每个人推送的内容和目录结构等的不同造成冲突导致 推送失败。</p></li><li><p>但是仅仅用分支当然无法完成合作，我们最终是要一起看到代码的，所以git有一个功能——合并，对于我们的需求刚刚好。合并是什么呢？是指将一个分支的更改合并到另一个分支上的操作。合并可以将一个分支上的提交应用到另一个分支上，使两个分支的代码保持同步，这就是我们想要的效果。但是合并不是随随便便就能够完成的，他有以下条件：</p><ol start="3"><li><p>提交代码：在进行合并之前，确保您已将您的更改提交到相应的分支(也就是你自己的分支先提交一次版本)。这样可以保证合并操作是基于最新的代码。</p></li><li><p>冲突解决：如果两个分支上的代码在同一个地方进行了修改，或者在合并时两个分支的项目结构不同，可能会发生冲突。</p><ul><li><p>有的修改不发生冲突(目录结构相同且修改的为不同文件的不同位置)，Git会自动帮你合并相应的代码</p></li><li><p>有的修改会发生冲突(与上一条相悖)，需要手动解决，通过编辑代码文件来处理冲突部分。</p></li></ul></li><li><p>推送代码：合并后，此时远程分支和本地分支上的内容就完全相同了，将合并后的代码推送到      远程分支上,提交成了最新的代码</p></li></ol><blockquote><p>所以每个成员应该拥有自己的分支，并且要设置一个前端远程分支和后端远程分支分别提供给前端人员和后端人员进行代码合作，而且要进行适当次数的拉取和更新操作，不要过于频繁或滞后。</p></blockquote></li><li><p>当我们用合并将前端远程分支和后端远程分支分别完善后，如果要把前端代码和后端代码放在同一台机器上时，我们先要拉取前端远程仓库中最新版本，然后，在本地仓库中创建一个新的分支来存放后端代码，使用<code>git pull</code>命令拉取后端分支的代码，这样，前端人员就可以在自己的分支上进行前端和后端代码的合并和测试。后端人员操作同理，不过要确保在拉取和合并代码之前，前(后)端先与后(前)端开发人员进行沟通，了解后(前)端代码的分支名称和最新状态。</p></li></ol><blockquote><p>当然，严谨的项目合作是需要每次完成一个模块内容就需要进行一个单元测试才能检测出项目是否出现问题。另外，项目出现冲突是非常正常的事情，最重要的是解决问题。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在多人合作时，避免冲突的关键是有效的沟通和协作。以下是一些方法可以帮助减少冲突的发生：</p><ol><li><p>使用分支：每个人可以在自己的分支上进行开发工作，这样可以避免直接在主分支上进行更改，减少冲突的可能性。在开发完成后，通过合并分支将更改合并到主分支上。</p></li><li><p>频繁地提交和拉取：每个人应该频繁地提交他们的更改，并定期从远程仓库拉取更新。这样可以避免更改集中在某个分支上，减少冲突的可能性。</p></li><li><p>沟通和协调：团队成员之间的沟通和协调是避免冲突的关键。如果两个人同时对同一部分代码进行更改，及时的沟通可以帮助解决冲突并协商合适的解决方案。</p></li><li><p>解决冲突：如果发生冲突，不要惊慌。冲突是正常的，使用版本控制系统提供的工具（如Git的冲突解决工具）来解决冲突。与团队成员一起合作解决冲突，并确保每个人都理解和接受最终的修改。</p></li><li><p>代码审查：进行代码审查是另一个有效的方法，可以帮助发现潜在的冲突和问题。通过团队中其他成员的审查，可以提前发现和解决冲突，提高代码质量和合作效率。</p></li><li><p>文档和规范：制定一些规范和最佳实践，例如代码风格、命名约定等，以减少冲突的发生。确保所有成员了解和遵守这些规范。<br>总之，通过良好的沟通、合理的分支管理、频繁的提交和拉取、合作解决冲突以及代码审查等方法，可以帮助团队避免冲突，并提高多人合作的效率和质量。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>错误日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python操作Kafka错误日志</title>
    <link href="/2023/11/23/Python%E6%93%8D%E4%BD%9CKafka/"/>
    <url>/2023/11/23/Python%E6%93%8D%E4%BD%9CKafka/</url>
    
    <content type="html"><![CDATA[<h2 id="问题一：无法打开zookeeper"><a href="#问题一：无法打开zookeeper" class="headerlink" title="问题一：无法打开zookeeper"></a>问题一：无法打开zookeeper</h2><blockquote><p>由于我kafka下载的版本是2.12-2.4.0,所以内置了zookeeper，不用单独下载</p></blockquote><ul><li><p><mark>错误一</mark>：这个问题其实是由于我太久没有操作cmd导致的，我忘记了同盘下，切目录需要使用cd，导致系统找不到该路径</p></li><li><p><mark>错误二</mark>：但仅仅这样还是会错误，仍然是系统找不到该路径</p><p>  所以我们还需要做以下操作：</p><p>  在你所对应的kafka目录下要自己手动创建两个名为”data”和”logs”的文件夹，方便后续安排路径</p><p>  <img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130445054.png"></p><p>  接着，打开config&#x2F;zookeeper.properties(使用vscode或者记事本打开都可以)，我们来改一下配置，红框中是你所需要改的，默认是tmp什么的，改成刚刚手动创建的data文件位置即可；同时注意观察下面的客户端口号是否为2181(zookeeper默认就是这个，有些博主说只要改成对应的端口号就都可以使用，我没改)</p><p>  <img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130500376.png"></p><p>  下一步，打开config&#x2F;server.properties，同样也是更改配置，同理，也要检查好你的地址和端口号</p><p>  <img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130509611.png"></p><p>  <img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130513931.png"></p></li><li><p><mark>错误三</mark>：然后我们再来尝试打开，结果是kafka正常打开，zookeeper仍然找不到路径，这是为什么呢？于是我通过搜索找到了问题的原因：由于kafka是使用Java进行编写的，所以，应该是Java环境存在问题 <strong>↓</strong></p><p>  参考文章<a href="https://blog.csdn.net/GoodburghCottage/article/details/125896525">Windows10下安装Kafka超级详细的教程（包含安装过程中遇到的问题和解决办法）</a></p><p>  解决方法：打开 kafka\bin\windows\kafka-run-class.bat ⽂件。<br>  进⼊kafka⽬录 ，打开上⾯说到的这个⽂件，查找后的内容如下所示。</p><p>  <img src="https://yjmm-own-station-picture-bed.oss-cn-beijing.aliyuncs.com/HexoStationimage-20250528130641569.png"></p></li></ul><p>具体原因请看这个博主的说法<a href="https://blog.csdn.net/VinceZxy/article/details/100153085">.\bin\windows\kafka-server-start.bat .\config\server.properties 系统找不到指定路径，启动zookeeper时候闪退</a></p><p>雀食，我的原因也是这个，由于已经在Java环境中写了&#x2F;bin，查找路径的时候仍然写上了&#x2F;bin，结果路径就变成了&#x2F;bin&#x2F;bin，自然就找不到路径了</p><h2 id="问题二：操作Kafka写代码报错"><a href="#问题二：操作Kafka写代码报错" class="headerlink" title="问题二：操作Kafka写代码报错"></a>问题二：操作Kafka写代码报错</h2><p>zookeeper和kafka都已经启动就绪</p><p><mark>错误一</mark>：一定要注意是否打开了MySQL服务，数据库是否连接好，参数配置是否设置正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">conn = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;your_password&#x27;</span>, database=<span class="hljs-string">&#x27;数据采集与处理&#x27;</span>)<br></code></pre></td></tr></table></figure><p><mark>错误二</mark>：字段类型为data无法被自动处理成json格式，需要函数strftime()转换成字符串格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&#x27;birthday&#x27;</span>: row[<span class="hljs-number">3</span>].strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br></code></pre></td></tr></table></figure><p><mark>错误三</mark>：如果像以下这么写会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">producer = KafkaProducer(bootstrap_servers=<span class="hljs-string">&#x27;localhost:9092&#x27;</span>)<br></code></pre></td></tr></table></figure><p>可以多加一个api(api版本就是你的kafka对应版本)  <strong>↓</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">producer = KafkaProducer(bootstrap_servers=<span class="hljs-string">&#x27;localhost:9092&#x27;</span>, api_version=(<span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h2 id="未解决问题"><a href="#未解决问题" class="headerlink" title="未解决问题"></a>未解决问题</h2><p>每次打印直接输出整个消息，无法每行分开打印（整个写循环改打印规则，不想改了）</p><p>kafka_2.12-2.4.0\bin\windows&gt;kafka-server-start.bat ….\config&#x2F;server.properties</p><p>kafka_2.12-2.4.0\bin\windows&gt;zookeeper-server-start.bat ….\config&#x2F;zookeeper.properties</p>]]></content>
    
    
    <categories>
      
      <category>错误日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>error</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/23/hello-world/"/>
    <url>/2023/11/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
